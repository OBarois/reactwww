{"version":3,"sources":["clockController.js","wwwx/shapes/TexturedSurfaceShape.js","wwwx/shapes/TexturedSurfacePolygon.js","useEww.js","dhusToGeojson.js","eocatToGeojson.js","useDatahub.js","searchmanager.js","eww.js","missionselector.js","mapselector.js","mapstatelabel.js","datemanager/components/datelabel/DateLabel.js","datemanager/components/datecontroller/DateController.js","datemanager/components/datecontroller/useClock.js","datemanager/components/dateselector/DateSelectorScale.js","datemanager/components/dateselector/DateSelector.js","datemanager/DateManager.js","debug.js","slidepanel.js","colorpicker.js","app.js","registerServiceWorker.js","initglobalstates.js","index.js"],"names":["ClockController","PickedObject","WorldWind","SurfacePolygon","SurfaceShape","useEww","_ref","id","clon","clat","alt","starfield","atmosphere","names","eww","useRef","_useState","useState","_useState2","Object","slicedToArray","setProjection","_useState3","_useState4","_useState5","_useState6","geojsonlayers","setGeojsonlayers","_useState7","_useState8","_useState9","latitude","longitude","altitude","aoi","pickedItems","_useState10","ewwstate","setEwwState","addQuicklookWMS","renderable","console","log","computeSectors","current","drawContext","Sector","FULL_SPHERE","wmsConfigQL","service","layerNames","title","numLevels","format","size","sector","levelZeroDelta","Location","qllayer","WmsLayer","userProperties","date","addLayer","redraw","layers","getLayerByName","name","i","length","displayName","enableRenderables","_x","_enableRenderables","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","time","j","renderableStartDate","renderableStopDate","wrap","_context","prev","next","includes","renderables","Date","earthObservation","acquisitionInformation","acquisitionParameter","acquisitionStartTime","getTime","acquisitionStopTime","enabled","timeOffset","stop","removeQuicklooks","removeAllRenderables","setGlobeStates","lo","navigator","lookAtLocation","la","al","range","vp","bl","tr","view","viewport","polygon","pickTerrain","canvasCoordinates","x","y","height","terrainObject","position","Math","round","err","width","getViewPolygon","objectSpread","viewpolygon","handleClick","recognizer","clientX","clientY","pickList","pick","highlighted","objects","userObject","push","handleDoubleClick","point","useEffect","WorldWindow","redrawCallbacks","BasicWorldWindowController","prototype","applyLimits","WWMath","clamp","clickRecognizer","ClickRecognizer","numberOfClicks","doubleClickRecognizer","recognizeSimultaneouslyWith","maxClickInterval","tapRecognizer","TapRecognizer","numberOfTaps","doubleTapRecognizer","maxTapInterval","wmsConfigBg","wmsConfigNames","configuration","baseUrl","slice","starFieldLayer","StarFieldLayer","atmosphereLayer","AtmosphereLayer","quicklookLayer","RenderableLayer","layer","l","setTimeout","goToAnimator","travelTime","goTo","Position","deepPicking","removeGeojson","removeLayer","addGeojson","url","epoch","renderableLayer","properties","updated","ceil","random","GeoJSONParser","load","concat","toConsumableArray","geometry","Name","NAME","placemarkAttributes","PlacemarkAttributes","imageScale","imageColor","Color","labelAttributes","offset","Offset","OFFSET_FRACTION","isPointType","isMultiPointType","attributes","isLineStringType","isMultiLineStringType","drawOutline","outlineColor","interiorColor","red","green","blue","outlineWidth","isPolygonType","isMultiPolygonType","ShapeAttributes","highlightAttributes","addWMS","toggleStarfield","_layer","toggleAtmosphere","setTime","toggleProjection","prevProj","supportedProjections","newProj","indexOf","globe","projection","ProjectionWgs84","ProjectionEquirectangular","ProjectionMercator","ProjectionPolarEquidistant","toggleNames","dhusToGeojson","response","mapFromHubOpenSearch","item","reshuffle","array","json","content","hubItem","assign","int","double","str","sizeInBytes","sizeArray","split","parseFloat","wellknown","footprint","type","ingestiondate","uuid","beginposition","endposition","downloadUrl","link","href","quicklookUrl","parentIdentifier","status","platform","platformShortName","platformname","platformSerialIdentifier","platformserialidentifier","sensor","instrument","instrumentshortname","operationalMode","sensoroperationalmode","relativePassNumber","parseInt","relativeorbitnumber","orbitNumber","orbitnumber","startTimeFromAscendingNode","stopTimeFromAscendingNode","orbitDirection","orbitdirection","productInformation","productType","producttype","message","features","feed","entry","Array","isArray","map","filter","totalResults","startIndex","itemsPerPage","eocatToGeojson","identifier","EarthObservation","metaDataProperty","EarthObservationMetaData","procedure","EarthObservationEquipment","Platform","shortName","Instrument","Sensor","phenomenonTime","TimePeriod","beginPosition","endPosition","acquisitionParameters","Acquisition","useDatahub","collections","setCollections","geojsonResults","setGeojsonResults","loading","setLoading","_useGlobal","useGlobal","searchepoch","_useGlobal3","startend","_useGlobal5","mission","_useGlobal7","apppolygon","_useGlobal9","_useGlobal10","gosearch","_SearchManager","_useGlobal4","setStartend","setReplace","_useGlobal11","_useGlobal12","setGosearch","windowSize","searchList","setSearchList","replacemode","setReplacemode","useHotkeys","count","SearchDate","toJSON","startepoch","UTC","getUTCFullYear","getUTCMonth","getUTCDate","_startdate","_enddate","newSearchList","start","end","SearchManager","searchUrl","setSearchurl","fetchURL","_ref2","index","newurl","paging","geoJson","replace","totalresults","startindex","itemsperpage","fetch","mode","credentials","sent","Number","min","t0","t1","_x2","startIndexOrigin","collectionArray","code","templateUrl","dateOff","areaOff","target","buildUrl","e","Eww","_useEww","_useDatahub","appdate","appstarfield","setAppstarfield","_useGlobal13","_useGlobal14","appatmosphere","setAppatmosphere","_useGlobal15","_useGlobal16","appnames","setAppnames","_useGlobal17","setSearching","_useGlobal19","setAppaltitude","_useGlobal21","setApplatitude","_useGlobal23","setApplongitude","_useGlobal25","_useGlobal26","setApppolygon","_useGlobal27","_useGlobal28","setApppickeditems","reactn_default","createElement","style","background","MissionSelector","_useGlobal2","setMission","react_default","className","draggable","src","onClick","MapSelector","_useGlobal6","MapStateLabel","appaltitude","apppickeditems","items","setItems","showQL","setShowQL","fontSize","key","display","DateLabel","highlight","animated","dateFormat","toUpperCase","DateController","startdate","onDateChange","_useClock","autoStart","initdate","duration","setDate","playing","setPlaying","step","refreshrate","ldate","intervalRef","timeoutRef","setInterval","clearTimeout","clearInterval","togglePause","reset","increaseSpeed","abs","decreaseSpeed","forceDate","newdate","useClock","lastTap","setLasttap","now","DateSelectorScale","zoomfactor","immediate","scale","timescale","setTimescale","scaleText","_start","_zoom","day","month","hour","monthcode","year","lastday","lastmonth","lastyear","lasthour","tics","putyear","putmonth","putday","putevenhour","puthour","offsetHeight","refdate","getUTCHours","class","pos","label","top","_useSpring","useSpring","dater","zoomer","_useSpring2","_useSpring2$","set","useLayoutEffect","to","config","onFrame","value","web","div","ref","DateSelector","onFinalDateChange","STEPS_UP","STEPS_DOWN","selector","refscaledate","scaledate","setScaledate","lastStartdate","setlLastStartdate","newstart","setNewstart","active","setActive","setZoomfactor","_useState11","_useState12","_useState13","_useState14","xy","bind","useGesture","onDrag","steparea","zoom","event","first","down","delta","velocity","direction","_ref2$temp","temp","getValue","laststeparea","deltaoffset","Xoffset","parentElement","offsetWidth","pageX","pageY","floor","add","sub","decay","onRest","dateselector_DateSelectorScale","points","DateManager","searching","selectorStartdate","setselectorStartdate","controllerStartdate","setcontrollerStartdate","labeldate","setLabelDate","datecontroller_DateController","datelabel_DateLabel","dateselector_DateSelector","Debug","debug","setDebug","debugkeys","setDebugkeys","lines","SlidePanel","props","visible","setVisible","slidePanel","toggle","vxvy","_ref$temp","initTarget","getAttribute","passive","imageSrc","transform","interpolate","children","ColorPicker","appcolor","lib","color","onChangeComplete","document","documentElement","setProperty","hex","App","hasFetched","setFetch","setAppdate","setSearchdate","_useGlobal8","setVertical","prevVertical","mockApi","Promise","resolve","randomInt","_doFetch","doFetch","isFull","setIsfull","_useFullscreen","useFullscreen","window","body","toggleFullscreen","isFullscreen","dist_default","onChange","datemanager_DateManager","src_mapstatelabel","src_missionselector","src_mapselector","src_colorpicker","src_debug_0","action","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","setGlobal","render","app","getElementById","URL","process","origin","addEventListener","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e338af9f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useClock } from \"./useClock\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\n\n\n\n\nfunction ClockController({ duration }) {\n\n    const [ appdate, setAppdate ] = useGlobal('appdate');\n\n    const {\n        date,\n        playing,\n        togglePause,\n        reset,\n        increaseSpeed,\n        decreaseSpeed,\n        forceDate\n    } = useClock({\n        autoStart: false,\n        duration: duration,\n        startdate: appdate\n    })\n\n\n    useHotkeys(\"t\",togglePause)\n    useHotkeys(\"r\",reset)\n    useHotkeys(\".\",increaseSpeed)\n    useHotkeys(\",\",decreaseSpeed)\n\n    //const dateLabel = (new Date(date) ).toUTCString()\n\n\n\n    useEffect(() => {\n        //console.log(\"useEffect (date) in ClockController\")\n        setAppdate(date)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[date]);\n\n    useEffect(() => {\n        //console.log(\"useEffect (appdate) in ClockController\")\n        //setAppdate(date)\n        forceDate(appdate)\n        //setAppdate({appdate: new Date(date)})\n    },[appdate]);\n\n    useEffect(() => {\n        //console.log(\"useEffect (init) in ClockController\")\n        //console.log(\"appdate changed\")\n        forceDate(appdate)\n    },[]);\n\n    const [lastTap, setLasttap] = useState()\n    const handleDoubleTap = () => {\n        console.log('pressed')\n        const now = Date.now();\n        if (lastTap && (now - lastTap) < 300) {\n          reset();\n        } else {\n            setLasttap(now)\n            togglePause()\n        }\n      }\n    \n    return (\n/*\n        <div {...handlers} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width:\"100%\", height: \"100%\"}}>\n            {(new Date(date) ).toUTCString()}\n        </div>\n\n<div onClick={togglePause}><img className='Buttons' src={playing?pauseImage:playImage} alt=''/></div>\n*/\n\n    <div className= 'ClockController' onClick={handleDoubleTap} ></div>\n    );\n}\n\nexport default ClockController;\n","import WorldWind from 'webworldwind-esa';\n\nconst PickedObject = WorldWind.PickedObject,\n    SurfacePolygon = WorldWind.SurfacePolygon,\n    SurfaceShape = WorldWind.SurfaceShape;\n\n/**\n * If no image is set, it behaves the same as a SurfaceShape.\n * To set an image pass it to the shape .image property (myShape.image = myImg;)\n *\n * Limitations with an image:\n * The boundaries have to define a quadrilateral (can be defined by 4 corners)\n * If the edges arc over the globe, the interior will not be filled properly\n * Shapes that cross the anti-meridian will not use the image\n * Performance is lower\n *\n * When used with an image it will divide the image in cells (based on the step, maxImageWidth, maxImageHeight values)\n * and draw each image cell to the canvas\n * This is a slow operation, try to keep the number of cells \"low\"\n * For example:\n * step = 1, maxImageWidth = 64, maxImageHeight = 64\n * will produce 4096 (64 * 64 * 1) cells\n */\nclass TexturedSurfaceShape extends SurfaceShape {\n    constructor(attributes) {\n        super(attributes);\n\n        /**\n         * Image to draw on the surface of the shape.\n         * @type {Image}\n         */\n        this.image = null;\n\n        /**\n         * Determines the division step of the image\n         * Lower numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.step = 1;\n\n        /**\n         * Resizes the image\n         * Higher numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.maxImageWidth = 64;\n        this.maxImageHeight = 64;\n    }\n\n    get image() {\n        return this._image;\n    }\n\n    set image(img) {\n        this._image = img;\n        this.stateKeyInvalid = true;\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    renderToTexture(dc, ctx2D, xScale, yScale, dx, dy) {\n        let attributes = (this.highlighted ? (this.highlightAttributes || this._attributes) : this._attributes);\n        let drawInterior = (!this._isInteriorInhibited && attributes.drawInterior);\n        let drawOutline = (attributes.drawOutline && attributes.outlineWidth > 0);\n        let pickColor;\n\n        if (!drawInterior && !drawOutline) {\n            return;\n        }\n\n        if (dc.pickingMode && !this.pickColor) {\n            this.pickColor = dc.uniquePickColor();\n        }\n\n        if (dc.pickingMode) {\n            pickColor = this.pickColor.toHexString();\n        }\n\n        if (this.crossesAntiMeridian || this.containsPole) {\n            if (drawInterior) {\n                this.draw(this._interiorGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                ctx2D.fill();\n            }\n            if (drawOutline) {\n                this.draw(this._outlineGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        } else {\n            if (this.image && !dc.pickingMode) {\n                ctx2D.save();\n            }\n            let points = this._interiorGeometry[0].map(location => ({\n                x: location.longitude * xScale + dx,\n                y: location.latitude * yScale + dy\n            }));\n            this.drawPoints(points, ctx2D);\n            if (drawInterior) {\n                if (this.image && !dc.pickingMode) {\n                    ctx2D.clip();\n                    this.drawImageToPolygon(ctx2D, this.image, points);\n                    ctx2D.restore();\n                }\n                else {\n                    ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                    ctx2D.fill();\n                }\n            }\n            if (drawOutline) {\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        }\n\n        if (dc.pickingMode) {\n            let po = new PickedObject(this.pickColor.clone(), this.pickDelegate ? this.pickDelegate : this,\n                null, this.layer, false);\n            dc.resolvePick(po);\n        }\n    }\n\n    drawPoints(points, ctx2D) {\n        ctx2D.beginPath();\n        ctx2D.moveTo(points[0].x, points[0].y);\n        for (let i = 1, len = points.length; i < len; i++) {\n            ctx2D.lineTo(points[i].x, points[i].y);\n        }\n    }\n\n    drawImageToPolygon(ctx, image, points) {\n        let canvasWidth = ctx.canvas.width;\n        let canvasHeight = ctx.canvas.height;\n\n        let offScreenCanvas = TexturedSurfaceShape.offScreenCanvas();\n        let offScreenCtx = TexturedSurfaceShape.offScreenCtx();\n\n        let corners = this.getCorners(points);\n        let axesDim = this.getAxesDimensions(corners);\n\n        let offScreenWidth = Math.min(axesDim.distX, this.maxImageWidth);\n        let offScreenHeight = Math.min(axesDim.distY, this.maxImageHeight);\n\n        offScreenCanvas.width = offScreenWidth;\n        offScreenCanvas.height = offScreenHeight;\n        offScreenCtx.drawImage(image, 0, 0, offScreenWidth, offScreenHeight);\n\n        let step = this.step;\n        let width = offScreenWidth - 1;\n        let height = offScreenHeight - 1;\n        let topLeft, topRight, bottomRight, bottomLeft, y1Current, y2Current, y1Next, y2Next;\n\n        for (let y = 0; y < height; y += step) {\n            y1Current = this.lerp(corners[0], corners[3], y / height);\n            y2Current = this.lerp(corners[1], corners[2], y / height);\n            y1Next = this.lerp(corners[0], corners[3], (y + step) / height);\n            y2Next = this.lerp(corners[1], corners[2], (y + step) / height);\n\n            for (let x = 0; x < width; x += step) {\n                topLeft = this.lerp(y1Current, y2Current, x / width);\n                topRight = this.lerp(y1Current, y2Current, (x + step) / width);\n                bottomRight = this.lerp(y1Next, y2Next, (x + step) / width);\n                bottomLeft = this.lerp(y1Next, y2Next, x / width);\n\n                let dWidth = Math.ceil(Math.max(step, Math.abs(topRight.x - topLeft.x), Math.abs(bottomLeft.x - bottomRight.x))) + 1;\n                let dHeight = Math.ceil(Math.max(step, Math.abs(topLeft.y - bottomLeft.y), Math.abs(topRight.y - bottomRight.y))) + 1;\n\n                if (this.isRectInsideCanvas(topLeft, dWidth, dHeight, canvasWidth, canvasHeight)) {\n                    ctx.drawImage(offScreenCanvas, x, y, step, step, topLeft.x, topLeft.y, dWidth, dHeight);\n                }\n            }\n        }\n    }\n\n    getCorners(points, bbox) {\n        bbox = bbox || this.getBbox(points);\n\n        let edgePoints = points.filter(point => this.isEdgePoint(point, bbox));\n\n        if (edgePoints.length === 5 &&\n            this.arePointsEqual(edgePoints[0], edgePoints[edgePoints.length - 1])) {\n            edgePoints.length = 4;\n        }\n\n        if (edgePoints.length > 4) {\n            let leftPoints = edgePoints.filter(point => point.x === bbox.minX);\n            let rightPoints = edgePoints.filter(point => point.x === bbox.maxX);\n\n            let {top: topLeft, bottom: bottomLeft} = this.getTopBottom(leftPoints);\n            let {top: topRight, bottom: bottomRight} = this.getTopBottom(rightPoints);\n\n            return [topLeft, topRight, bottomRight, bottomLeft];\n        }\n\n        let slope1 = this.getSlope(edgePoints[0], edgePoints[2]);\n        let slope2 = this.getSlope(edgePoints[1], edgePoints[3]);\n        let topLeftPoint = this.getTopLeftPoint(slope1, edgePoints[0], edgePoints[2]) ||\n            this.getTopLeftPoint(slope2, edgePoints[1], edgePoints[3]);\n\n        if (!topLeftPoint) {\n            console.log('Could not determine top left corner with the slope method');\n            return edgePoints;\n        }\n\n        let topLeftIndex = edgePoints.findIndex(point => point.x === topLeftPoint.x && point.y === topLeftPoint.y);\n        let newCorners = [];\n        for (let i = topLeftIndex; i < edgePoints.length + topLeftIndex; i++) {\n            newCorners.push(edgePoints[i % edgePoints.length]);\n        }\n\n        return newCorners;\n    }\n\n    getBbox(points) {\n        let bbox = {\n            minX: Number.MAX_SAFE_INTEGER,\n            maxX: Number.MIN_SAFE_INTEGER,\n            minY: Number.MAX_SAFE_INTEGER,\n            maxY: Number.MIN_SAFE_INTEGER,\n        };\n\n        return points.reduce((bbox, point) => {\n            bbox.minX = Math.min(bbox.minX, point.x);\n            bbox.maxX = Math.max(bbox.maxX, point.x);\n            bbox.minY = Math.min(bbox.minY, point.y);\n            bbox.maxY = Math.max(bbox.maxY, point.y);\n\n            return bbox;\n        }, bbox);\n    }\n\n    getTopBottom(points) {\n        return points.reduce((acc, point) => {\n            if (point.y < acc.top.y) {\n                acc.top = point;\n            }\n\n            if (point.y > acc.bottom.y) {\n                acc.bottom = point;\n            }\n\n            return acc;\n        }, {top: points[0], bottom: points[0]});\n    }\n\n    distance(p1, p2) {\n        let dx = p1.x - p2.x;\n        let dy = p1.y - p2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    isEdgePoint(point, bbox) {\n        return (\n            point.x === bbox.minX || point.x === bbox.maxX ||\n            point.y === bbox.minY || point.y === bbox.maxY\n        );\n    }\n\n    arePointsEqual(p1, p2) {\n        return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    getSlope(p1, p2) {\n        return (p1.y - p2.y) / (p1.x - p2.x);\n    }\n\n    getTopLeftPoint(slope, point1, point2) {\n        if (slope <= 0) {\n            return null;\n        }\n\n        if (point1.y < point2.y) {\n            return point1;\n        }\n\n        return point2;\n    }\n\n    getAxesDimensions(corners) {\n        let dx = Math.abs(corners[0].x - corners[1].x);\n        let dy = Math.abs(corners[0].y - corners[1].y);\n\n        let distX = 0;\n        let distY = 0;\n\n        if (dx > dy) {\n            distX = this.distance(corners[0], corners[1]);\n            distY = this.distance(corners[0], corners[3]);\n        }\n        else {\n            distX = this.distance(corners[0], corners[3]);\n            distY = this.distance(corners[0], corners[1]);\n        }\n\n        return {distX, distY};\n    }\n\n    lerp(p1, p2, t) {\n        return {\n            x: p1.x + (p2.x - p1.x) * t,\n            y: p1.y + (p2.y - p1.y) * t\n        };\n    }\n\n    isRectInsideCanvas(point, width, height, canvasWidth, canvasHeight) {\n        return (\n            point.x + width >= 0 &&\n            point.x <= canvasWidth &&\n            point.y + height >= 0 &&\n            point.y < canvasHeight\n        );\n    }\n\n    static offScreenCanvas() {\n        if (!TexturedSurfaceShape.canvas) {\n            TexturedSurfaceShape.canvas = document.createElement('canvas');\n        }\n        return TexturedSurfaceShape.canvas;\n    }\n\n    static offScreenCtx() {\n        if (!TexturedSurfaceShape.ctx) {\n            let canvas = TexturedSurfaceShape.offScreenCanvas();\n            TexturedSurfaceShape.ctx = canvas.getContext('2d');\n        }\n        return TexturedSurfaceShape.ctx;\n    }\n}\n\nexport default TexturedSurfaceShape;","import WorldWind from 'webworldwind-esa';\nimport TexturedSurfaceShape from './TexturedSurfaceShape';\n\nconst SurfacePolygon = WorldWind.SurfacePolygon;\n\n/**\n * @exports TexturedSurfacePolygon\n */\nclass TexturedSurfacePolygon extends TexturedSurfaceShape {\n    /**\n     * Constructs Textured Surface Polygon. The polygon is drawn using the standard attributes. Unlike the standard\n     * surface polygon it draws associated image on the area of the polygon.\n     * @param boundaries {Location[]} Array of locations enclosing the surface polygon.\n     * @param attributes {ShapeAttributes} Attributes used for the styling of the Surface Polygon\n     */\n    constructor(boundaries, attributes) {\n        super(attributes);\n\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - constructor - The specified boundary is not an array.');\n        }\n\n        /**\n         * Boundaries relevant for the current polygon.\n         * @type {Location[]}\n         * @memberof TexturedSurfacePolygon.prototype\n         * @public\n         */\n        this.boundaries = boundaries;\n\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    get boundaries() {\n        return this._boundaries;\n    }\n\n    set boundaries(boundaries) {\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - set boundaries - The specified boundary is not an array.');\n        }\n\n        this.resetBoundaries();\n        this._boundaries = boundaries;\n        this._stateId = SurfacePolygon.stateId++;\n        this.stateKeyInvalid = true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeStateKey() {\n        return TexturedSurfacePolygon.staticStateKey(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeBoundaries(dc) {\n    }\n\n    static staticStateKey(shape) {\n        return SurfacePolygon.staticStateKey(shape) + \" pg \" + shape._stateId;\n    }\n}\n\nexport default TexturedSurfacePolygon;","import React, { useState, useEffect, useRef } from \"react\";\nimport WorldWind from \"webworldwind-esa\";\nimport TexturedSurfacePolygon from './wwwx/shapes/TexturedSurfacePolygon'\n\n\n// BasicWorldWindowController.prototype.applyLimits = function () {\n//     var navigator = this.wwd.navigator;\n\n//     // Clamp latitude to between -90 and +90, and normalize longitude to between -180 and +180.\n//     navigator.lookAtLocation.latitude = WWMath.clamp(navigator.lookAtLocation.latitude, -90, 90);\n//     navigator.lookAtLocation.longitude = Angle.normalizedDegreesLongitude(navigator.lookAtLocation.longitude);\n\n//     // Clamp range to values greater than 1 in order to prevent degenerating to a first-person navigator when\n//     // range is zero.\n//     navigator.range = WWMath.clamp(navigator.range, 1, Number.MAX_VALUE);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.heading = Angle.normalizedDegrees(navigator.heading);\n\n//     // Clamp tilt to between 0 and +90 to prevent the viewer from going upside down.\n//     navigator.tilt = WWMath.clamp(navigator.tilt, 0, 90);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.roll = Angle.normalizedDegrees(navigator.roll);\n\n//     // Apply 2D limits when the globe is 2D.\n//     if (this.wwd.globe.is2D() && navigator.enable2DLimits) {\n//         // Clamp range to prevent more than 360 degrees of visible longitude. Assumes a 45 degree horizontal\n//         // field of view.\n//         var maxRange = 2  Math.PI  this.wwd.globe.equatorialRadius;\n//         navigator.range = WWMath.clamp(navigator.range, 1, maxRange);\n\n//         // Force tilt to 0 when in 2D mode to keep the viewer looking straight down.\n//         navigator.tilt = 0;\n//     }\n// };\n\nexport function useEww({ id, clon, clat, alt, starfield, atmosphere, names }) {\n    //console.log('useEww renders')\n    \n  \n    const eww = useRef(null)\n    const [projection, setProjection] = useState(\"3D\")\n    // const [aoi, setAoi] = useState({type: null, value: null})\n    const [aoi, setAoi] = useState('')\n    const [geojsonlayers, setGeojsonlayers] = useState([])\n    const [quicklooklayers, setQuicklooklayers] = useState([])\n    const [ewwstate, setEwwState] = useState({latitude: clat, longitude: clon, altitude: alt, aoi:'', pickedItems: []})\n\n    //toggle atmosphere\n    function toggleAtmosphere() {\n        console.log('toggleAtmosphere')\n        let _layer = getLayerByName('Atmosphere')\n        _layer.enabled = !_layer.enabled\n        eww.current.redraw();\n    }\n\n    //toggle starField\n    function toggleStarfield() {\n        console.log('toggleStarfield')\n        let _layer = getLayerByName('StarField')\n        _layer.enabled = !_layer.enabled\n        eww.current.redraw();\n    }\n\n    //toggle name overlay\n    function toggleNames() {\n        console.log('toggleNames')\n        let _layer = getLayerByName('overlay_bright')\n        _layer.enabled = !_layer.enabled\n        eww.current.redraw();\n    }\n\n    function  getViewPolygon () {\n        let view = eww.current.viewport\n        let area = {}\n        let polygon = ''\n        // console.log('view: ' + view.x + '/' + view.y + '/' + view.width + '/' + view.height);\n\n        let bl ;\n        try { \n            bl =  eww.current.pickTerrain(eww.current.canvasCoordinates(view.x, view.y + view.height)).terrainObject().position\n            bl.latitude = Math.round(bl.latitude * 10000)/10000\n            bl.longitude = Math.round(bl.longitude * 10000)/10000\n        }\n        catch(err) {bl = null;}\n\n\n        let tr ;\n        try { \n            tr = eww.current.pickTerrain(eww.current.canvasCoordinates(view.x + view.width, view.y)).terrainObject().position\n            tr.latitude = Math.round(tr.latitude * 10000)/10000\n            tr.longitude = Math.round(tr.longitude * 10000)/10000\n        }\n        catch(err) {tr = null;}\n\n        //console.log(bl.longitude+'/'+bl.latitude+'/'+tr.longitude+'/'+tr.latitude);\n        if(bl == null || tr == null )  {\n            //   area = {type:\"bbox\", value:\"-180,-90,180,90\"};\n              polygon = ''\n        } else {\n              area = {\n                    type: \"bbox\",\n                    value:\n                           bl.longitude +','\n                          + bl.latitude +','\n                          +tr.longitude +','\n                          +tr.latitude\n              };\n\n              polygon = 'POLYGON((' \n                + bl.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + bl.latitude + '))' \n        }\n        return polygon\n\n    }\n    \n    const addGeojson = (url,epoch) => {\n\n        // console.log('replace: '+replace)\n\n        function shapeConfigurationCallback(geometry, properties) {\n            let configuration = {};\n            configuration.userProperties = properties\n\n            let name = properties.name || properties.Name || properties.NAME\n            if (name) configuration.name = name\n    \n            let placemarkAttributes = new WorldWind.PlacemarkAttributes(null);\n            placemarkAttributes.imageScale = 10;\n            placemarkAttributes.imageColor = new WorldWind.Color(0, 1, 1, 0.2);\n            placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n                WorldWind.OFFSET_FRACTION, 5,\n                WorldWind.OFFSET_FRACTION, 5);\n            //placemarkAttributes.imageSource = whiteDot;\n    \n    \n            if (geometry.isPointType() || geometry.isMultiPointType()) {\n                configuration.attributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);\n                \n            } else if (geometry.isLineStringType() || geometry.isMultiLineStringType()) {\n                configuration.attributes.drawOutline = true;\n                configuration.attributes.outlineColor = new WorldWind.Color(\n                    0.1 * configuration.attributes.interiorColor.red,\n                    0.3 * configuration.attributes.interiorColor.green,\n                    0.7 * configuration.attributes.interiorColor.blue,\n                    1\n                );\n                configuration.attributes.outlineWidth = 1;\n            } else if (geometry.isPolygonType() || geometry.isMultiPolygonType()) {\n                configuration.attributes = new WorldWind.ShapeAttributes(null);\n                configuration.attributes.interiorColor = new WorldWind.Color(1, 0, 0, 0.2);\n                configuration.attributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.3);\n\n                configuration.highlightAttributes = new WorldWind.ShapeAttributes(configuration.attributes);\n                configuration.highlightAttributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.4);\n                configuration.highlightAttributes.interiorColor = new WorldWind.Color(1, 0, 0, 0);\n                // configuration.attributes.outlineWidth = 0.3;\n\n                // configuration.attributes.applyLighting = true;\n                // configuration.attributes.enableLighting = true;\n                // configuration.attributes.imageSource = properties.quicklookUrl\n\n            }\n    \n            //console.log(configuration.attributes);\n            return configuration;\n        }\n\n        \n        function loadCompleteCallback() {\n            console.log(renderableLayer)\n            setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n            enableRenderables(epoch) // uncomment to disable renderables\n            eww.current.redraw();\n        }\n    \n        // if (replace) removeGeojson()\n        let renderableLayer = new WorldWind.RenderableLayer('Products: '+url.properties.updated+Math.ceil(Math.random() * 10000))\n        \n        eww.current.addLayer(renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers(eww.current.layers)\n        let geoJson = new WorldWind.GeoJSONParser(url);\n        geoJson.load(loadCompleteCallback, shapeConfigurationCallback, renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])        \n    }\n\n    function removeGeojson() {\n        for(let i=0;i<geojsonlayers.length;i++) {\n          eww.current.removeLayer(geojsonlayers[i])\n        //   console.log('removing json layers: ')\n        //   console.log(geojsonlayers[i])\n        }\n        setGeojsonlayers((geojsonlayers)=>[])\n        // console.log(geojsonlayers)\n        eww.current.redraw();\n      }\n\n    function addWMS() {\n    }\n\n    function addQuicklookWMS(renderable) {\n\n        console.log(renderable.computeSectors(eww.current.drawContext))\n        console.log(WorldWind.Sector.FULL_SPHERE)\n\n        // for S2:  \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S2L1C_TRUE_COLOR&styles=&format=image/png&transparent=true&version=1.1.1&width=1500&height=1000&srs=EPSG:4326&bbox=12.357903,41.800495,12.625694,41.984760\n\n        \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S1B_IW_GRDH_1SDV_20190520T050758_20190520T050823_016323_01EB81_6EB6&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A3857&bbox=2035059.441064533,7044436.526761846,2191602.4749925737,7200979.560689885\n        let wmsConfigQL = {\n            service: \"https://view.onda-dias.eu/instance00/ows\",\n            // layerNames: renderable.userProperties.title,\n            // layerNames: 'S2L1C_TRUE_COLOR',\n            layerNames: 'S1_IW_GRDH_FullResolution',\n            \n            // title: renderable.userProperties.title,\n            title: 'quicklook',\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: renderable.computeSectors(eww.current.drawContext)[0],\n            // sector: renderable.sector,\n            // sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n\n        // let wmsConfigQL = {\n        //     service: \"https://tiles.maps.eox.at/wms\",\n        //     layerNames: \"overlay_bright\",\n        //     title: \"overlay_bright\",\n        //     numLevels: 19,\n        //     format: \"image/png\",\n        //     size: 256,\n        //     sector: WorldWind.Sector.FULL_SPHERE,\n        //     levelZeroDelta: new WorldWind.Location(90, 90)\n        // }\n        // eww.current.removeLayer(getLayerByName('quicklook') )\n        let qllayer =  new WorldWind.WmsLayer(wmsConfigQL, renderable.userProperties.date)\n        eww.current.addLayer(qllayer)\n        eww.current.redraw()\n        console.log(eww.current.layers)\n    }\n\n    function getLayerByName(name) {\n        // console.log('Searching layer: '+ name)\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            // console.log('display name: '+eww.current.layers[i].displayName)\n            if (eww.current.layers[i].displayName === name) return eww.current.layers[i]\n        }\n        return null\n    }\n\n    async function enableRenderables(time) {\n        let timeOffset = 1000 * 60 * 60 * 3 // 3 hours\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            if (eww.current.layers[i].displayName.includes('Products:')) {\n                \n                for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                    let renderable = eww.current.layers[i].renderables[j]\n                    console.log('enabling')\n                    if (time != 0) {\n                        let renderableStartDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStartTime)).getTime()\n                        let renderableStopDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStopTime)).getTime()\n                        renderable.enabled = (renderableStartDate <= time+timeOffset/2 && renderableStopDate >= time-timeOffset/2) ? true : false   \n                        // console.log('enabling: '+ renderable.displayName  )\n                        // if(renderable.enabled) {\n                        //     let transparency = 1 - (Math.abs(renderableStartDate - time) / (timeOffset/2))\n                        //     renderable.attributes.interiorColor.set(\n                        //         renderable.attributes.interiorColor.red -transparency,\n                        //         renderable.attributes.interiorColor.green,\n                        //         transparency,\n                        //         renderable.attributes.interiorColor.alpha) \n                                // renderable.render(eww.current.drawContext)\n\n                        // }\n                    } else {\n                        renderable.enabled = false\n                    }         \n                }\n            }\n            if (eww.current.layers[i].displayName === 'quicklook') {\n                // eww.current.layers[i].enabled = \n            }\n        }\n\n    }\n\n    function addQuicklook(renderable) {\n\n        function imageLoader(url, useCredentials) {\n            return new Promise((resolve, reject) => {\n                const img = new Image();\n        \n                img.onload = function() {\n                    resolve(img);\n                };\n        \n                img.onerror = function(e){\n                    reject(e);\n                };\n        \n                img.crossOrigin = useCredentials ? 'Use-Credentials' : 'Anonymous';\n                img.src = url;\n                console.log(' adding QL')\n            });\n        }\n\n\n        // console.log(' adding QL')\n        //  console.log(renderable.attributes)\n        // let quicklook =  new TexturedSurfacePolygon(renderable.sector)\n        // let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n        // // quicklookLayer.addRenderable(quicklook)\n        // // setQuicklooklayers((quicklooklayers)=>[...quicklooklayers,quicklookLayer])\n        // // eww.current.addLayer(quicklookLayer)\n        // let ql = new Image()\n        // ql.src = renderable.userProperties.quicklookUrl\n        // quicklook.image = ql\n        \n        imageLoader(renderable.userProperties.quicklookUrl,true).then(image => {\n            let quicklookLayer = getLayerByName('Quicklooks')\n            removeQuicklooks()\n            console.log(renderable.boundaries)\n            console.log(renderable.boundingSector)\n            // \n            let footprint = [\n                renderable.boundaries[0][0],\n                renderable.boundaries[0][3],\n                renderable.boundaries[0][2],\n                renderable.boundaries[0][1]\n            ]\n            // footprint[0].pop()\n            console.log(footprint)\n            let quicklook =  new TexturedSurfacePolygon(footprint,renderable.attributes)\n            quicklook.maxImageWidth = 128\n            quicklook.maxImageHeight = 128\n            \n            quicklook.image = image\n            removeQuicklooks()\n            quicklookLayer.addRenderable(quicklook)\n            // eww.current.addLayer(quicklookLayer)\n            eww.current.redraw()\n        })\n    }\n\n    function removeQuicklooks() {\n        getLayerByName('Quicklooks').removeAllRenderables()\n        eww.current.redraw()\n    }\n\n    function setTime(epoch) {\n        getLayerByName('StarField').time =  new Date(epoch)\n        getLayerByName('Atmosphere').time = new Date(epoch)\n        enableRenderables(epoch)\n        // console.log('display name: ')\n        // console.log(getLayerByName('StarField').displayName)\n        eww.current.redraw();\n        \n\n     }\n\n\n    function toggleProjection() {\n        setProjection( prevProj => {\n          console.log(\"prevProjection: \"+prevProj)\n          let supportedProjections = [ \"3D\", \"Equirectangular\", \"Mercator\"];\n          let newProj = (supportedProjections.indexOf(prevProj) + 1)%supportedProjections.length\n          console.log(\"newProjection: \"+supportedProjections[newProj])\n          switch (supportedProjections[newProj]) {\n            case \"3D\":\n                eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n                break;\n            case \"Equirectangular\":\n                eww.current.globe.projection = new WorldWind.ProjectionEquirectangular();\n                break;\n            case \"Mercator\":\n                eww.current.globe.projection = new WorldWind.ProjectionMercator();\n                break;\n            case \"North Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"North\");\n                break;\n            case \"South Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"South\");\n                break;\n            default:\n            eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n            }\n          eww.current.redraw();\n          return supportedProjections[newProj]\n          })      \n      }\n\n    // callback from eww   \n    const setGlobeStates = () => {\n        \n        let lo = eww.current.navigator.lookAtLocation.longitude\n        let la = eww.current.navigator.lookAtLocation.latitude\n        let al = eww.current.navigator.range\n        let vp = (al < 2000000?getViewPolygon():'')\n\n        setEwwState((ewwstate) => { return {...ewwstate, longitude:lo, latitude: la, altitude: al, viewpolygon: vp}}) \n\n    }\n\n    // handler for tap/click\n\n    const handleClick  = (recognizer) => {\n        // console.log('click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        // Perform the pick. Must first convert from window coordinates to canvas coordinates, which are\n        // relative to the upper left corner of the canvas rather than the upper left corner of the page.\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n        console.log(pickList)\n        if (pickList.terrainObject()) {\n            // position = pickList.terrainObject().position;\n            // store list of selected footprints in a string for later comparison\n            // eww.current.removeLayer(getLayerByName('quicklook') )\n            // de-highlight all rendereables\n            for (let i = 0; i < eww.current.layers.length; i++) {\n                if (eww.current.layers[i].displayName.includes('Products:')) {                    \n                    for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                        let renderable = eww.current.layers[i].renderables[j]\n                        renderable.highlighted = false\n                    }\n                }\n            }\n    \n            // ... and now highlight all picked rendereables\n            let pickedItems = []\n            for (let i = 0; i < pickList.objects.length; i++) {\n                if (pickList.objects[i].userObject instanceof WorldWind.SurfaceShape) {\n                    pickedItems.push(pickList.objects[i].userObject) \n                    pickList.objects[i].userObject.highlighted = !pickList.objects[i].userObject.highlighted\n                    \n                    // addQuicklookWMS(pickList.objects[i].userObject)\n                    removeQuicklooks()\n                    addQuicklookWMS(pickList.objects[i].userObject)\n                }\n            }\n            console.log(pickedItems)\n            setEwwState((ewwstate) => { return {...ewwstate, pickedItems: pickedItems}})\n            eww.current.redraw()\n        } else {\n            console.log('No position !');\n            removeQuicklooks()\n\n            return;\n        }\n\n\n    }\n\n    const handleDoubleClick  = (recognizer) => {\n        console.log('double click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n\n        let position;\n  \n  \n        // Get coordinates of clicked point and list of selected footprints. Do nothing if click done outside the globe.\n        if (pickList.terrainObject()) {\n            position = pickList.terrainObject().position;\n            // eww.current.goTo(new WorldWind.Location(position.latitude, position.longitude));\n\n            let point = \"POINT(\"+position.longitude+' '+position.latitude+\")\"\n            \n            setEwwState((ewwstate) => { return {...ewwstate, aoi: point}}) \n    \n        } else {\n              console.log('No position !');\n              setEwwState((ewwstate) => { return {...ewwstate, aoi: ''}})\n        }\n  \n        \n\n       \n    }\n\n    // useEffect(() => {\n    //     console.log(\"useEffect aoi: \" + aoi)\n    //     let newewwstate = {...ewwstate, aoi: aoi}\n    //     setEwwState(newewwstate)\n    // }, [aoi]); \n\n    // didMount effect\n    useEffect(() => {\n        console.log(\"useEffect (mount) in Eww  star/atmo: \"+ starfield+'/'+atmosphere)\n        // eww.current = new WorldWind.WorldWindow(id, elevationModel);\n        eww.current = new WorldWind.WorldWindow(id);\n        eww.current.redrawCallbacks.push(setGlobeStates)\n\n        // Define a min/max altitude limit\n        WorldWind.BasicWorldWindowController.prototype.applyLimits = function () {\n            eww.current.navigator.range = WorldWind.WWMath.clamp(eww.current.navigator.range, 2000, 300000000);\n        }\n\n        // define click/tap recognisers\n        // let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        // tapRecognizer.numberOfTaps = 1;\n        // let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        // doubleTapRecognizer.numberOfTaps = 2;\n        // doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n\n        let clickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleClick);\n        clickRecognizer.numberOfClicks = 1;\n        let doubleClickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleDoubleClick);\n        doubleClickRecognizer.numberOfClicks = 2;\n        doubleClickRecognizer.recognizeSimultaneouslyWith(clickRecognizer);\n        doubleClickRecognizer.maxClickInterval = 200;\n\n        let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        tapRecognizer.numberOfTaps = 1;\n        let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        doubleTapRecognizer.numberOfTaps = 2;\n        doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n        doubleTapRecognizer.maxTapInterval = 200;\n\n\n\n        //setWwd(eww);\n        let wmsConfigBg = {\n            service: \"https://tiles.maps.eox.at/wms\",\n            layerNames: \"s2cloudless-2018\",\n            title: \"s2cloudless-2018\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n    \n        let wmsConfigNames = {\n            service: \"https://tiles.maps.eox.at/wms\",\n            layerNames: \"overlay_bright\",\n            title: \"overlay_bright\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n        WorldWind.configuration.baseUrl = WorldWind.configuration.baseUrl.slice(0,-3)\n        let starFieldLayer = new WorldWind.StarFieldLayer();\n        let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_01deg.jpg');\n        // let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_3km.jpg');\n        \n        //atmosphereLayer.minActiveAltitude = 5000000\n\n        let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n    \n        let layers = [\n            { layer: new WorldWind.WmsLayer(wmsConfigBg, \"\"), enabled: true },\n            { layer: new WorldWind.WmsLayer(wmsConfigNames, \"Names\"), enabled: names },\n            { layer: starFieldLayer, enabled: starfield },\n            { layer: atmosphereLayer, enabled: atmosphere },\n            { layer: quicklookLayer, enabled: true }\n        ];\n    \n        for (let l = 0; l < layers.length; l++) {\n            layers[l].layer.enabled = layers[l].enabled;\n            eww.current.addLayer(layers[l].layer);\n        }\n\n        // quicklookLayer.maxActiveAltitude = 4000000\n\n        //let date = new Date();\n        starFieldLayer.time = new Date();\n        atmosphereLayer.time = new Date();\n        setTimeout(() => {\n            eww.current.goToAnimator.travelTime = 1000;\n            eww.current.goTo(new WorldWind.Position(clat, clon, alt));\n            eww.current.redraw();\n            }, 2000)\n    \n        eww.current.redraw();\n        eww.current.deepPicking = true;\n        // eww.current.orderedRenderingFilters.push(declutterByTime)\n    }, []); // effect runs only once\n        \n  \n  return { ewwstate, removeGeojson, addGeojson, addWMS, toggleStarfield, toggleAtmosphere, setTime, toggleProjection, toggleNames };\n}\n","import wellknown from 'wellknown';\n\nexport default function dhusToGeojson(response) {\n\n    \n    function mapFromHubOpenSearch(item) {    \n        function reshuffle(array) {\n            let json = {};\n            for(let i=0; i < array.length; i++) {\n                json[array[i].name] =  array[i].content;\n            }\n            return json;\n        }\n\n        try {\n            let hubItem = {};\n            if(item.date) Object.assign(hubItem,reshuffle(item.date));\n            if(item.int) Object.assign(hubItem,reshuffle(item.int));\n            if(item.double) Object.assign(hubItem,reshuffle(item.double));\n            if(item.str) Object.assign(hubItem,reshuffle(item.str));\n\n\n            var sizeArray = hubItem.size.split(\" \");\n            var sizeInBytes;\n            switch (sizeArray[1]) {\n                case \"B\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0]));\n                    break;\n                case \"MB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024);\n                    break;\n                case \"GB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024*1024);\n                    break;\n                case \"TB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024*1024*1024);\n                    break;\n                default: \n                    sizeInBytes = Math.round(parseFloat(sizeArray[0]));\n                    break;\n\n            }\n            \n\n            var newItem = {\n                id: item.title,\n                geometry: wellknown(hubItem.footprint),\n                type: \"Feature\",\n                properties: {\n                    updated: new Date(hubItem.ingestiondate),\n                    title: item.title,\n                    name: item.title,\n                    uuid: item.id,\n                    date: hubItem.beginposition  +'/'+  hubItem.endposition,\n                    downloadUrl: item.link[0].href,\n                    quicklookUrl: (item.link.length >= 2) ? item.link[2].href: null,\n                    // links: {\n                    //     data: [{\n                    //         href: item.link[0].href,\n                    //     }]\n                    // },\n                    earthObservation: {\n                        parentIdentifier: \"\",\n                        status: \"ARCHIVED\",\n                        acquisitionInformation: [{\n                            platform: {\n                                platformShortName: hubItem.platformname,\n                                platformSerialIdentifier: hubItem.platformserialidentifier\n                            },\n                            sensor: {\n                                instrument: hubItem.instrumentshortname,\n                                operationalMode: hubItem.sensoroperationalmode\n                            },\n                            acquisitionParameter: {\n                                acquisitionStartTime: new Date(hubItem.beginposition),\n                                acquisitionStopTime: new Date(hubItem.endposition),\n                                relativePassNumber: parseInt(hubItem.relativeorbitnumber),\n                                orbitNumber: parseInt(hubItem.orbitnumber),\n                                startTimeFromAscendingNode: null,\n                                stopTimeFromAscendingNode: null,\n                                orbitDirection: hubItem.orbitdirection\n\n                            }\n                        }],\n                        productInformation: {\n                            productType: hubItem.producttype,\n                            //timeliness: indexes[\"product\"][\"Timeliness Category\"],\n                            size: sizeInBytes\n                        }\n                    }\n                }\n            }\n        \n            return newItem;\n        } catch (err) {\n            console.log(\"error parsing item from dhus: \"+err.message);\n            return {};\n        }\n    }\n\n    let features = [];\n    try {\n        if( response.feed.entry ) {\n            if(Array.isArray(response.feed.entry)) {\n                console.log('entry is an  array')\n                features = response.feed.entry.map( item =>  mapFromHubOpenSearch(item)).filter(item => item !== {});\n            } else {\n                features = [mapFromHubOpenSearch(response.feed.entry)]\n            }\n                \n        } else {\n            features = []\n        }\n        \n    } catch (err) {\n        console.log(response);\n        console.log(\"Error: \");\n        console.log(err);\n        features = []\n    }\n    //console.log(JSON.stringify(features));\n    let geojson = {   \n            type: \"FeatureCollection\",\n            id: \"search\",\n            properties: {\n                totalResults: response.feed[\"opensearch:totalResults\"],\n                startIndex: (response.feed[\"opensearch:startIndex\"])?response.feed[\"opensearch:startIndex\"]:1,\n                itemsPerPage: response.feed[\"opensearch:itemsPerPage\"],\n                title: \"DHuS search response\",\n                updated: new Date()\n            },\n            features: features\n        };\n\n    return geojson\n\n}\n","import wellknown from 'wellknown';\n\nexport default function eocatToGeojson(response) {\n\n    \n    function mapFromHubOpenSearch(item) {    \n\n        try {\n            \n\n            var newItem = {\n                id: item.id,\n                geometry: item.geometry,\n                type: \"Feature\",\n                properties: {\n                    updated: item.properties.updated,\n                    title: item.properties.title,\n                    name: item.title,\n                    uuid: item.properties.identifier,\n                    date: item.properties.date,\n                    downloadUrl: null,\n                    quicklookUrl: null,\n                    // links: {\n                    //     data: [{\n                    //         href: item.link[0].href,\n                    //     }]\n                    // },\n                    earthObservation: {\n                        parentIdentifier: item.properties.EarthObservation.metaDataProperty.EarthObservationMetaData.parentIdentifier,\n                        status: \"ARCHIVED\",\n                        acquisitionInformation: [{\n                            platform: {\n                                platformShortName: item.properties.EarthObservation.procedure.EarthObservationEquipment.platform.Platform.shortName,\n                                platformSerialIdentifier: null\n                            },\n                            sensor: {\n                                instrument: item.properties.EarthObservation.procedure.EarthObservationEquipment.instrument.Instrument.shortName,\n                                operationalMode: item.properties.EarthObservation.procedure.EarthObservationEquipment.sensor.Sensor.operationalMode\n                            },\n                            acquisitionParameter: {\n                                acquisitionStartTime: new Date(item.properties.EarthObservation.phenomenonTime.TimePeriod.beginPosition),\n                                acquisitionStopTime: new Date(item.properties.EarthObservation.phenomenonTime.TimePeriod.endPosition),\n                                relativePassNumber: null,\n                                orbitNumber: item.properties.EarthObservation.procedure.EarthObservationEquipment.acquisitionParameters.Acquisition.orbitNumber,\n                                startTimeFromAscendingNode: null,\n                                stopTimeFromAscendingNode: null,\n                                orbitDirection: item.properties.EarthObservation.procedure.EarthObservationEquipment.acquisitionParameters.Acquisition.orbitDirection\n\n                            }\n                        }],\n                        productInformation: {\n                            productType: item.properties.EarthObservation.metaDataProperty.EarthObservationMetaData.productType,\n                            //timeliness: indexes[\"product\"][\"Timeliness Category\"],\n                            size: null\n                        }\n                    }\n                }\n            }\n        \n            return newItem;\n        } catch (err) {\n            console.log(\"error parsing item from dhus: \"+err.message);\n            return {};\n        }\n    }\n\n    let features = [];\n    try {\n        if( response.features ) {\n            if(Array.isArray(response.features)) {\n                console.log('features is an  array')\n                features = response.features.map( item =>  mapFromHubOpenSearch(item)).filter(item => item !== {});\n            } \n                \n        } else {\n            features = []\n        }\n        \n    } catch (err) {\n        console.log(response);\n        console.log(\"Error: \");\n        console.log(err);\n        features = []\n    }\n    //console.log(JSON.stringify(features));\n    let geojson = {   \n            type: \"FeatureCollection\",\n            id: \"search\",\n            properties: {\n                totalResults: response.properties.totalResults,\n                startIndex: response.properties.startIndex,\n                itemsPerPage: response.properties.itemsPerPage,\n                title: response.properties.title,\n                updated: response.properties.updated\n            },\n            features: features\n        };\n\n    return geojson\n\n}\n","import { useState, useEffect } from \"react\";\nimport dhusToGeojson from \"./dhusToGeojson\";\nimport eocatToGeojson from \"./eocatToGeojson\"\nimport { useGlobal } from 'reactn';\nimport dateFormat from \"dateformat\"\nimport SearchManager from './searchmanager'\n\n\n\n\nexport default function useDatahub() {\n\n    const [ collections, setCollections ] = useState([])\n\n\n    const buildUrl = ({code, polygon, start, end, startindex}) => {\n\n\n        \n\n        // const getTargetCollection= (mission) => {\n        //     return collections.find( (collection) => {return collection.code == mission} )\n        // }\n        // console.log(getTargetCollection(mission))\n        let target = collections[code]\n        let newurl = target.templateUrl\n        //let start, end, \n        // let windowSize\n        \n\n        if(polygon.length > 0) {\n            // windowSize = 1000 * 60 * 60 * 24 * 30 // 1 month time window\n            // start = dateFormat(new Date(date - windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // end =  dateFormat(new Date(date + windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // console.log('|'+polygon.length+'|')\n            newurl = newurl.replace(\"{polygon}\", polygon)\n            newurl = newurl.replace(target.dateOff, '')\n            // newurl = newurl.replace(\"{start}\", start)\n            // newurl = newurl.replace(\"{end}\", end)\n\n        } else {\n            // windowSize = 1000 * 60 * 60 * 24  // 3 hours time window\n            // windowSize = 1000 * 60 * 60 * 24 * 30 // 1 month time window\n\n            // start = dateFormat(new Date(date - windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // end =  dateFormat(new Date(date + windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n\n            newurl = newurl.replace(target.areaOff, '')\n            newurl = newurl.replace(\"{start}\", start)\n            newurl = newurl.replace(\"{end}\", end)\n        }\n        \n        // startindex = startindex == 0 ? startindex : startindex + target.startIndexOrigin\n        // newurl = newurl.replace(\"{startindex}\",target.startIndexOrigin)\n\n\n        return newurl\n    }\n\n    \n    const MAX_ITEMS = 13000\n\n    const [geojsonResults, setGeojsonResults] = useState(null)\n    const [loading, setLoading] = useState(false)\n    \n    const [ searchepoch,  ] = useGlobal('searchepoch');\n    const [ startend,  ] = useGlobal('startend');\n    const [ mission,  ] = useGlobal('mission');\n    const [ apppolygon,  ] = useGlobal('apppolygon');\n    const [gosearch, setGosearch] = useGlobal('gosearch')\n\n\n    const [se] = SearchManager();\n\n    const [ searchUrl, setSearchurl  ] = useState(null);\n    // const [ searchtimeout, setSearchtimeout ] = useState(null);\n\n//{totalresults,startindex}\n\n// fetch('https://...')\n//   .then(response => response.json())\n//   .then(data => console.log('data is', data))\n//   .catch(error => console.log('error is', error));\n    useEffect(() => {\n        const fetchURL = async (url,index) => {\n             setLoading(true)\n            let newurl = url\n            newurl = newurl.replace(\"{startindex}\",index)\n            console.log('Search: '+newurl)\n            let paging = {totalresults:0, startindex:0, itemsperpage:0}\n            try {\n                \n                const response = await fetch(newurl, {mode: 'cors', credentials: 'include'})\n                // console.log( response.text())\n                try {\n                    const json = await response.json()\n                    const geoJson = (mission === 'ENVISAT')? eocatToGeojson(json) : dhusToGeojson(json)\n                    // console.log('totalResults: ' + geoJson.properties.totalResults)\n                    paging = {\n                        totalresults: geoJson.properties.totalResults == null ? 0 : Number(geoJson.properties.totalResults) ,\n                        startindex:  Number(geoJson.properties.startIndex), \n                        itemsperpage:  Number(geoJson.properties.itemsPerPage)\n                    }\n                    console.log(paging)\n\n                    // setPagination(paging)\n                    if(paging.totalresults>0) setGeojsonResults(geoJson) \n\n                    if (paging.startindex + paging.itemsperpage < Math.min(paging.totalresults,MAX_ITEMS) ) {\n                        console.log(\"There's More...\")  \n                        fetchURL(url,(paging.startindex + paging.itemsperpage))\n                    } else {\n                        setLoading(false)  \n                    }\n\n                } catch (err) {\n                    console.log(\"Didn't recieve a json !\")\n                    console.log(err)\n                    setLoading(false);\n                }\n            } catch(err) {\n                console.log(\"Error contacting server...\")\n                console.log(err)\n                setLoading(false)   \n            }\n        }\n\n        if(searchUrl) {\n            // setLoading(true)\n            fetchURL(searchUrl,collections[mission].startIndexOrigin)\n        }\n    }, [searchUrl]);\n    \n\n    useEffect(() => {\n        console.log('DataHub ready. '+mission)\n        let _collections = [\n            {\n                code: 'S1',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-1 AND producttype:GRD)&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-1 A/B GRD' ,\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S2A',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-2 AND filename:S2A_MSIL1C*)&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-2 A/B Level 1C',\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S2B',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-2 AND filename:S2B_MSIL1C*)&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-2 A/B Level 1C',\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S3',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-3 AND (producttype:OL_1_ERR___ OR producttype:SL_1_RBT___ OR producttype:SR_1_SRA___))&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-3 A/B, OLCI/SLSTR/SRAL' ,\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S5P',\n                templateUrl: 'https://s5phub.copernicus.eu/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-5 precursor AND (producttype:L1B_RA_BD1 OR (producttype:L2__NO2___ AND processingmode:Near real time)))&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-1 A/B',\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'ENVISAT',\n                templateUrl: 'https://eocat.esa.int/api/catalogue/EOCAT-ENVISAT.ASA.IMP_1P/search?start={start}&stop={end}&format=json&count=50&startIndex={startindex}',\n                startIndexOrigin: 1,\n                name: 'Sentinel-1 A/B',\n                dateOff: ' beginposition:[{start} TO {end}]',\n                areaOff:  ' footprint:\"Intersects({polygon})\"'\n            }\n        ]\n    \n        let collectionArray = []\n        _collections.map((item)=>{collectionArray[item.code]=item})\n        setCollections(collectionArray)\n        \n    \n    }, []);\n\n\n\n    useEffect(() => {\n        console.log('mission: '+mission)\n        console.log('mission: '+mission+ ' start/end: '+ startend.start+'/' + startend.end + ' apppolygon: '+apppolygon)\n\n        if(mission && searchepoch) {\n            // clearTimeout(searchtimeout)\n            // let timeout = setTimeout(() => {\n                try {\n                    let url = buildUrl({\n                        code: mission,\n                        polygon: apppolygon, \n                        start: startend.start,\n                        end: startend.end\n                    })\n\n                    // setLoading(true)\n                    // console.log('start: '+collections[mission].startIndexOrigin)\n                    setSearchurl(url)\n            \n                } catch(e) {\n                    console.log('Not a JULIAN date !')\n                    console.log(e)\n                }\n\n            // },500)\n            // setSearchtimeout(timeout)\n            \n        }\n        \n    }, [gosearch, mission, apppolygon, startend.start]);\n\n    return {geojsonResults, loading}\n}\n","import { useState, useEffect } from \"react\"\nimport { useGlobal } from 'reactn'\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\n\nexport default function SearchManager() {\n\n    const [ searchepoch,  ] = useGlobal('searchepoch');\n    const [ startend,  setStartend] = useGlobal('startend');\n    const [ apppolygon,  ] = useGlobal('apppolygon');\n    const [ mission,  ] = useGlobal('mission');\n    const [ replace, setReplace ] = useGlobal('replace')\n    const [gosearch, setGosearch] = useGlobal('gosearch')\n\n\n    // const { geojsonResults, loading} = useDatahub();\n\n\n    const [windowSize, setWindowSize] = useState(1000 * 60 * 60 * 24)\n    const [searchList, setSearchList] = useState([])\n    const [replacemode, setReplacemode] = useState(0)\n    \n\n    // const [replacemode, toggleReplacemode] = useToggle(false)\n\n    // const [ startend, setStartend ] = useState({start:0, end:0});\n\n    // const toggleReplace = () => {\n    //     console.log('toggle replace from: '+replacemode)\n    //     if(replacemode == true) {\n    //         setReplacemode(false)\n    //     } else {\n    //         setReplacemode(true)\n    //     }\n\n    // }\n    // // replace => { setReplace(!replace); return !replace }\n    // useHotkeys('ctrl+k', () => setCount(prevCount => prevCount + 1));\n    // useHotkeys(\"z\",() => setReplacemode(state => !state))\n    useHotkeys(\"z\",() => setReplacemode(count => count+=1))\n\n    useEffect(() => {\n        console.log('apppolygon: '+apppolygon)\n        setReplacemode(count => count+=1)\n        // if(apppolygon == '') {\n        //     setWindowSize(1000 * 60 * 60 * 24)\n        //     // setStartend({\n        //     //     start: null,\n        //     //     end: null\n        //     // })    \n            \n\n        // } else {\n        //     setWindowSize(1000 * 60 * 60 * 24 * 7)\n        // }\n        // // setGosearch(Math.random)\n    }, [apppolygon, mission]);\n\n    useEffect(() => {\n        console.log(\"cleaning searches: \" + replacemode)\n        // setReplace(replacemode)\n        if(replacemode) {\n            setReplace(count => count+=1)\n            setSearchList([])\n            setGosearch(Math.random)\n        }\n    }, [replacemode]);\n\n\n    useEffect(() => {\n        // console.log('searchepoch: '+(new Date(searchepoch)).toJSON())\n        let SearchDate = new Date(searchepoch)\n        console.log('searchepoch: '+ SearchDate.toJSON())\n        let startepoch = (new Date(Date.UTC(SearchDate.getUTCFullYear(), SearchDate.getUTCMonth(), SearchDate.getUTCDate())))\n\n        // Catalogue search time window is discreet, set from 00:00:00 to 23:59:59 of the selected day \n        let _startdate = (new Date(startepoch.getTime())).toJSON()\n        let _enddate = (new Date(startepoch.getTime() + windowSize - 1000)).toJSON()\n\n        console.log('new start/end: '+_startdate + '/ ' + _enddate)\n\n        let newSearchList = searchList\n\n        if (newSearchList.indexOf(_startdate) < 0) {\n            newSearchList.push(_startdate)\n            if (newSearchList.length > 5) {\n                // newSearchList.shift()\n                console.log('should now remove geojson layer')\n            }\n            setSearchList(newSearchList)\n            setStartend({\n                start: _startdate,\n                end: _enddate\n            })    \n            setGosearch(Math.random)\n        } else {\n            console.log('Search already done !')\n            \n        }\n    }, [searchepoch]);\n\n\n\n\nreturn [ startend ]\n\n}\n","import React, { useGlobal, useState, useEffect, useLayoutEffect } from \"reactn\"\nimport { useEww } from \"./useEww\"\n// import { useGlobal } from 'reactn'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport useDatahub from \"./useDatahub\"\n\n\nexport default function Eww({ id, clat, clon, alt, starfield, atmosphere, names }) {\n\nconst {\n    ewwstate,\n    addGeojson,\n    removeGeojson,\n    addWMS,\n    toggleProjection,\n    toggleAtmosphere,\n    toggleStarfield,\n    toggleNames,\n    setTime\n} = useEww({\n    id: id,\n    clat: clat,\n    clon: clon,\n    alt: alt,\n    starfield: starfield,\n    atmosphere: atmosphere,\n    names: names\n})\n\n  // toogle projection\n  useHotkeys(\"p\",toggleProjection)  \n  useHotkeys(\"a\",toggleAtmosphere)  \n  useHotkeys(\"s\",toggleStarfield)  \n  useHotkeys(\"n\",toggleNames)  \n  useHotkeys(\"c\",removeGeojson)\n  \n\n  const { geojsonResults, loading} = useDatahub();\n  const [ searchepoch,  ] = useGlobal('searchepoch');\n  const [ startend,  ] = useGlobal('startend');\n  const [ replace,  ] = useGlobal('replace');\n\n  const [ mission,  ] = useGlobal('mission');\n  const [ appdate,  ] = useGlobal('appdate')\n  const [ appstarfield,  setAppstarfield] = useGlobal('appstarfield')\n  const [ appatmosphere,  setAppatmosphere] = useGlobal('appatmosphere')\n  const [ appnames,  setAppnames] = useGlobal('appnames')\n  const [ , setSearching ] = useGlobal('searching')\n  const [ , setAppaltitude ] = useGlobal('appaltitude')\n  const [ , setApplatitude ] = useGlobal('applatitude')\n  const [ , setApplongitude ] = useGlobal('applongitude')\n  const [ apppolygon, setApppolygon ] = useGlobal('apppolygon')\n  const [ apppickeditems, setApppickeditems ] = useGlobal('apppickeditems')\n  // const [ replace, setReplace ] = useState(true)\n\n  // useHotkeys(\"z\",()=>setReplace(state=>!state))\n\n  useEffect(() => {\n    if(geojsonResults) {\n      console.log('datahub in use')\n        console.log(geojsonResults)\n        try {\n          addGeojson(geojsonResults,appdate)\n        } catch (err) {\n          console.log(\"error on geojson parsing\")\n          console.log(err)\n        }\n      }\n      \n  },[geojsonResults]);\n\n  useEffect(() => {\n    console.log('replace: ' + replace)\n    removeGeojson()\n  },[replace]);\n\n  useEffect(() => {\n    // console.log('atmosphere')\n    toggleAtmosphere(appatmosphere)\n  },[appatmosphere])\n\n  useEffect(() => {\n    toggleStarfield(appstarfield)\n  },[appstarfield])\n\n  useEffect(() => {\n    toggleNames(appnames)\n  },[appnames])\n\n\n  useEffect(() => {\n    setSearching(loading)\n  },[loading]);\n\n  useEffect(() => {\n    setAppaltitude(ewwstate.altitude)\n    setApplongitude(ewwstate.longitude)\n    setApplatitude(ewwstate.latitude)\n  },[ewwstate.longitude,ewwstate.latitude, ewwstate.altitude ]);\n\n  // useEffect(() => {\n  //   // uncomment to search via polygon at low lats\n  //   // console.log(' could use polygon:')\n  //   // console.log(ewwstate.viewpolygon)\n  //   // setApppolygon(ewwstate.viewpolygon)\n\n  // },[ewwstate.viewpolygon ]);\n\n  useEffect(() => {\n    setApppolygon(ewwstate.aoi)\n    // setApppolygon('')\n  },[ewwstate.aoi]);\n\n  useEffect(() => {\n    // console.log(ewwstate.pickedItems.length + ' items picked')\n    // setApppolygon('')\n    setApppickeditems(ewwstate.pickedItems)\n  },[ewwstate.pickedItems]);\n\n\n\n  useEffect(() => {\n    // console.log('app date: '+appdate)\n    setTime(appdate)\n  },[appdate]);\n\n  useEffect(() => {\n    setAppatmosphere(atmosphere)\n    setAppstarfield(starfield)\n    setAppnames(names)\n    \n  },[]);\n\n\nlet globeStyle = {\n    background: 'inherit',\n    position: \"fixed\",\n    width: 'inherit',\n    height: 'inherit'\n  };\n\n\nreturn (\n    <canvas id={id} style={globeStyle} />\n)\n\n}\n","import React, { useEffect } from \"react\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './missionselector.css'\n\n\n// should use a prop\n\nfunction MissionSelector() {\n\n\n    const [ mission, setMission ] = useGlobal('mission');\n    useHotkeys(\"1\",()=>{setMission('S1')}) \n    useHotkeys(\"2\",()=>{setMission('S2A')}) \n    useHotkeys(\"3\",()=>{setMission('S3')}) \n    useHotkeys(\"5\",()=>{setMission('S5P')}) \n    useHotkeys(\"6\",()=>{setMission('ENVISAT')}) \n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    \n    //console.log('mission rendering')\n    return (\n        <div className='MissionSelector'>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s1_black.png' alt='' onClick={() => setMission('S1')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s2_black.png' alt='' onClick={() => setMission('S2A')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s2_black.png' alt='' onClick={() => setMission('S2B')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s3_black.png' alt='' onClick={() => setMission('S3')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s5p_black.png' alt='' onClick={() => setMission('S5P')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s5p_black.png' alt='' onClick={() => setMission('ENVISAT')} /></div>\n           \n            \n        </div>\n    )\n}\n\nexport default MissionSelector;\n","import React, { useEffect, useGlobal } from \"reactn\";\n// import { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './mapselector.css'\n\n\n// should use a prop\n\nfunction MapSelector() {\n\n\n    const [ appatmosphere, setAppatmosphere ] = useGlobal('appatmosphere');\n    const [ appstarfield, setAppstarfield ] = useGlobal('appstarfield');\n    const [ appnames, setAppnames ] = useGlobal('appnames');\n    // useHotkeys(\"1\",()=>{setMission('S1')}) \n    // useHotkeys(\"2\",()=>{setMission('S2')}) \n    // useHotkeys(\"3\",()=>{setMission('S3')}) \n    // useHotkeys(\"5\",()=>{setMission('S5P')}) \n    // useHotkeys(\"6\",()=>{setMission('ENVISAT')}) \n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    \n    //console.log('mission rendering')\n    return (\n        <div className='MapSelector'>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/atmosphere.png' alt='' onClick={() => setAppatmosphere(!appatmosphere)} /></div>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/starfield.png' alt='' onClick={() => setAppstarfield(!appstarfield)} /></div>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/names.png' alt='' onClick={() => setAppnames(!appnames)} /></div>\n           \n        </div>\n    )\n}\n\nexport default MapSelector\n","import React, { useEffect, useState, useLayoutEffect, useGlobal } from \"reactn\";\n// import { useGlobal } from 'reactn';\nimport \"./mapstatelabel.css\"\nimport { useHotkeys } from 'react-hotkeys-hook';\n\n\n\nfunction MapStateLabel() {\n\n    const [ appaltitude,  ] = useGlobal('appaltitude')\n    const [ apppickeditems, setApppickeditems ] = useGlobal('apppickeditems')\n    // let item = 'toto'\n    const [items, setItems] = useState([])\n    const [showQL, setShowQL] = useState(false)\n\n    useHotkeys(\"q\",()=>{setShowQL(showQL => !showQL)}) \n\n    useEffect(() => {\n        // console.log(apppickeditems)\n        // if (apppickeditems.length != 0) {\n        //     if (apppickeditems.length > 1) {\n        //         setItem(apppickeditems.length + ' items selected')\n        //     } else {\n        //         setItem(apppickeditems[0].userProperties.name)\n        //     }\n        //     // console.log(apppickeditems.length + ' items picked')\n        // } else {\n        //     setItem([])\n        // }\n        setItems(apppickeditems)\n      },[apppickeditems])\n    \n    // const [altitude, setAltitude] = useState()\n\n\n    // useLayoutEffect(() => {    \n    //     console.log('Altitude changed') \n    //     setAltitude(Math.ceil(appaltitude / 1000))\n    // },[appaltitude])\n\n    return (\n        <div className='MapStateLabel' >\n            <div style={{fontSize: 10}}>\n                {items.map( item => <div className='metadata' key={item.userProperties.name}>{item.userProperties.name}<img className='Quicklook' style={{display: showQL?'inline':'none'}} src={item.userProperties.quicklookUrl} alt=''/></div>)} \n            </div>\n            <div >{Math.ceil(appaltitude / 1000)+ ' Km'}</div>\n        </div>\n    )\n    // <div className='MonthLabel' key='month' style={highlight=='month'?{color: 'rgba(120,0,0,1)'}:{}} >{month}</div>\n\n\n    \n}\n\nexport default MapStateLabel;\n","import React from 'react';\nimport dateFormat from \"dateformat\"\nimport './DateLabel.css';\n\nfunction DateLabel({date, highlight, animated}) {\n\n\n    return (\n        <div className='LabelContainer' >\n            <div className='Date'>\n                <div className={highlight==='day' || highlight==='none'?'DayLabel':'DayLabel Greyedout'}  key='day'  >{dateFormat(date,'UTC:dd')}</div>\n                <div className='YearMonth'>\n                    <div className={highlight==='month' || highlight==='none'?'MonthLabel ':'MonthLabel  Greyedout'}  key='month' >{dateFormat(date,'UTC:mmm').toUpperCase()}</div>\n                    <div className={highlight==='year' || highlight==='none'?'YearLabel ':'YearLabel Greyedout'}  key='year' >{date.getUTCFullYear()}</div>\n                </div>\n            </div>\n            <div className={animated?'Line  Line-active':'Line'} key='line' ></div>\n            <div className={highlight==='time' || highlight==='none'?'TimeLabel ':'TimeLabel Greyedout'} key='time' >{dateFormat(date,'UTC:HH:MM:ss')}</div>\n        </div>\n    )\n}\nexport default DateLabel\n","import React, {useEffect, useState} from 'react';\nimport { useClock } from \"./useClock\"\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\nimport './DateController.css';\n\nfunction DateController({startdate, onDateChange}) {\n\n    const {\n        date,\n        // playing,\n        togglePause,\n        reset,\n        increaseSpeed,\n        decreaseSpeed,\n        // forceDate\n    } = useClock({\n        autoStart: false,\n        duration: 600000,\n        initdate: startdate\n    })\n\n\n\n    useHotkeys(\"t\",togglePause)\n    useHotkeys(\"r\",()=>{reset() })\n    useHotkeys(\".\",increaseSpeed)\n    useHotkeys(\",\",decreaseSpeed)\n\n    \n\n\n    useEffect(() => {\n        // console.log(\"date from useClock: \"+new Date(date).toJSON())\n        onDateChange(date)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[date]);\n\n    useEffect(() => {\n        // console.log(\"date from datemanager: \"+new Date(date).toJSON())\n        // forceDate(startdate)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[startdate]);\n\n    const [lastTap, setLasttap] = useState()\n    const handleDoubleTap = () => {\n        const now = Date.now();\n        if (lastTap && (now - lastTap) < 300) {\n          reset();\n        } else {\n            setLasttap(now)\n            togglePause()\n        }\n      }\n\n\n    return (\n        <div className='DateController' onClick={handleDoubleTap}/>\n    )\n}\nexport default DateController\n","// A refaire!!!\n\n\nimport { useState, useEffect, useRef } from \"react\";\n\n\nexport function useClock({ autoStart, duration, initdate }) {\n    //console.log('useClock renders')\n    //const { autoStart, duration } = settings || {};\n  \n    // let initDate = startdate\n    const [date, setDate] = useState(initdate)\n    const [playing, setPlaying] = useState(false)\n    // const [stepstate, setStepstate] = useState(1000*60*60)\n    // const [refreshrate, setrefreshrate] = useState(200)\n    \n    const step = useRef() \n    const refreshrate = useRef() \n    // step.current = 1000*60*60\n    refreshrate.current = 200\n    \n    const ldate = useRef()\n\n      // Control functions\n    const intervalRef = useRef()\n    const timeoutRef = useRef()\n    \n\n    // function increaseSpeed() {\n    //     setStep ( () => {\n    //         let newstate = (step > 0)? step * 2:step / 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    // function decreaseSpeed() {\n    //     setStep (() => {\n    //         let newstate = (step > 0)? step / 2:step * 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    function increaseSpeed() {\n        // stop()\n        step.current = (step.current > 0)? step.current *= 2:step.current /= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = refreshrate.current\n        console.log('step: '+step.current)\n        // setStepstate((st)=>st*2)\n        // start()\n    }\n    function decreaseSpeed() {\n        step.current = (step.current > 0)? step.current /= 2:step.current *= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = -1 * refreshrate.current\n        // setStepstate((st)=>st/2)\n    }\n\n    function togglePause() {\n        if (playing) {\n            stop()\n        } else {\n            start()\n        }\n    }\n    \n    function start() {\n        console.log('start clock')\n        if(!step.current) step.current = 1000*60*60\n        intervalRef.current = setInterval( ()=>{\n            ldate.current += step.current\n            setDate(new Date(ldate.current))\n        },refreshrate.current)\n        setPlaying(true)\n    }\n    \n    function stop() {\n        console.log('stop clock')\n        if(timeoutRef.current) clearTimeout(timeoutRef.current)\n        if (intervalRef.current) clearInterval(intervalRef.current)\n        setPlaying(false)\n    }\n    \n\n    function reset() {\n        stop()\n        ldate.current = new Date().getTime()\n        setDate(new Date(ldate.current))\n\n    }\n\n     \n    function forceDate(newdate) {\n        console.log('forcedate useclock: '+newdate.toJSON())\n        if(playing) {\n            stop()\n            ldate.current = newdate.getTime()\n            start()    \n        } else {\n            ldate.current = newdate.getTime()\n        }\n    }\n\n    useEffect(() => {\n        console.log('init start useclock '+initdate.toJSON())\n        // if ( !playing )  ldate.current = initdate.getTime()\n        if ( playing ) {\n                stop()\n            ldate.current = initdate.getTime()\n            start()\n        } else {\n            ldate.current = initdate.getTime()\n        }  \n    }, [initdate])\n\n\n\n    // didMount effect\n    useEffect(() => {\n        console.log('render useclock')\n        // setDate((new Date()).getTime())\n        ldate.current = new Date().getTime()\n        if (autoStart) {\n            start();\n        }\n        //return reset;\n    }, []);\n\n  \n  return { date, playing, togglePause, reset, increaseSpeed, decreaseSpeed, forceDate };\n}\n","import React, {useState, useEffect,useLayoutEffect, useRef} from 'react';\nimport {useSpring, animated} from 'react-spring'\nimport './DateSelector.css';\n\nfunction DateSelectorScale({date, zoomfactor, immediate}) {\n\n    const scale = useRef()\n    const [start, setStart] = useState(date)    \n    const [active, setActive] = useState(false)    \n    const [timescale, setTimescale] = useState('')    \n    // const [zoom, setZoom] = useState(zoomfactor)    \n\n\n    // useEffect(() => {     \n    //     setStart(date)\n    // },[date])\n        \n    const scaleText = (_start, _zoom) => {\n        // console.log('_start: '+_start.toJSON()+'  zoom: '+_zoom)\n        if(!scale.current) return\n            \n        const monthcode = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\n        const isEven = num => ((num % 2) == 0) ? true : false;\n\n\n        let day, month, hour, year = 0\n        let lastday =0\n        let lastmonth = 0\n        let lastyear = 0\n        let lasthour = 0\n        let tics = []    \n        let putyear = (_zoom < 1000*60*60*24*30*10)\n        let putmonth = (_zoom < 1000*60*60*24*5)\n        let putday = (_zoom < 1000*60*60*2)\n        let putevenhour = (_zoom < 1000*60*20)\n        let puthour = (_zoom < 1000*60*8)\n        // console.log('  zoom: '+((_zoom*10)/(1000*60*60*24) ) +'  puthour: '+puthour+'  putday: '+putday+'  putmonth: '+putmonth+'  putevenhour: '+putevenhour)\n        let lastpos = 0\n        for ( let i=0 ; i < scale.current.offsetHeight ; i+=1 ) {\n            let refdate = new Date( (i- scale.current.offsetHeight/2) * _zoom + _start.getTime()  )\n            day = refdate.getUTCDate()\n            month = monthcode[refdate.getUTCMonth()]\n            hour = refdate.getUTCHours()\n            year = refdate.getUTCFullYear()\n\n            if (putevenhour) {\n                if(hour != lasthour) {\n                    if (hour != 0 &&  (isEven(hour) || puthour)) {\n                        tics.push({class:'HourTic', pos: i, label: hour})\n                    } else  {\n                        if (hour == 0) {\n                            tics.push({class:'DayTic', pos: i, label: day})\n                            tics.push({class:'MonthTic', pos: i, label: month})\n                            tics.push({class:'YearTic', pos: i, label: year})            \n                        }\n                    }\n                }\n    \n            } else if (putday) {\n                if(day !== lastday) {\n                    if (day != 1) {\n                        tics.push({class:'DayTic', pos: i, label: day})\n                    } else {\n                        tics.push({class:'DayTic', pos: i, label: day})\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                     }\n                    \n                }\n    \n            } else if (putmonth) {\n                if(month !== lastmonth && lastday!=0 && putmonth) {\n                    if (month !== 'JAN') {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                    } else {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                    }\n                }\n    \n            } else if (putyear) {\n                if(year !== lastyear && lastmonth !== 0 ) {\n                    if (month !== 'JAN') {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                    } else {\n                        // tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                    }\n                }\n    \n            }\n\n            lastday = day\n            lastyear = year\n            lastmonth = month\n            lasthour = hour\n        }\n        \n        return tics.map(item => (            <div className={item.class} key={item.class+item.pos} style={{top:item.pos}}>{item.label}</div>))\n    }\n\n    // useLayoutEffect(() => {\n    //     setTimescale(scaleText(date,zoomfactor))\n    // },[date,zoomfactor])\n\n\n    const [{ dater, zoomer }, set] = useSpring(() => ({ dater: date.getTime(), zoomer: zoomfactor}))\n    useLayoutEffect(() => {\n        // console.log('zoomfactor: '+zoomfactor+'  to: '+date.toJSON())\n        \n        set({ \n            to: {\n                zoomer: zoomfactor, \n                dater: date.getTime()\n            },\n            config: {  duration: 400},\n            immediate: false,\n            onFrame: ()=>{\n                // console.log(zoomer.value+'/ '+(new Date(dater.value)).toJSON())\n                // setTimescale(scaleText(new Date(dater.value),zoomer.value))\n                setTimescale(scaleText(new Date(dater.value),zoomer.value))\n            }\n        })\n\n    },[ zoomfactor])\n\n    useLayoutEffect(() => {\n        // console.log('zoomfactor: '+zoomfactor+'  to: '+date.toJSON())\n        \n        set({ \n            to: {\n                zoomer: zoomfactor, \n                dater: date.getTime()\n            },\n            config: {  duration: 400},\n            immediate: immediate,\n            onFrame: ()=>{\n                // console.log(zoomer.value+'/ '+(new Date(dater.value)).toJSON())\n                // setTimescale(scaleText(new Date(dater.value),zoomer.value))\n                setTimescale(scaleText(new Date(dater.value),zoomer.value))\n            }\n        })\n\n    },[date])\n\n\n    return (\n        <animated.div ref={scale} className='DateSelectorScale' >\n            {timescale}\n        </animated.div>\n    )\n}\nexport default DateSelectorScale\n","import React, {useState, useEffect, useLayoutEffect, useRef} from 'react'\nimport {useSpring, animated, config} from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport { add, sub, scale } from 'vec-la'\nimport DateSelectorScale from './DateSelectorScale'\n\nimport './DateSelector.css';\n// import { start } from 'repl';\n\nfunction DateSelector({startdate, onDateChange, onFinalDateChange}) {\n    const STEPS_UP = [ 1000*60*60 ,  1000*60*60*24, 1000*60*60*24*15]\n    const STEPS_DOWN = [ 1000*60*60 , 1000*60*10, 1000*60*1.8, 1000*27, 1000*60*60*24]\n    \n\n    const selector = useRef()\n    const offset = useRef()\n    if(!offset.current) offset.current = [0, 0 ]\n    // offset.current = [0, 0 ]\n    const reflastscaledate = useRef()\n    const refscaledate = useRef()\n    // refscaledate.current = startdate\n    // offset.current=[0,0]\n    \n    const [scaledate, setScaledate ] = useState(startdate)\n    const [lastStartdate, setlLastStartdate ] = useState(startdate)\n    \n    const [newstart, setNewstart ] = useState(startdate)\n    // const [offset, setOffset ] = useState([0,0])\n    // const [step, setStep ] = useState(1)\n    const [active, setActive ] = useState(false)\n\n    // zoomfactor: how long is a pixel in ms\n    const [zoomfactor, setZoomfactor ] = useState(STEPS_UP[0])\n    const [scalezoom, setScalezoom ] = useState(zoomfactor)\n    const [immediate, setImmediate ] = useState(false)\n\n\n    const [{ xy }, set] = useSpring(() => ({ xy: [0,0] }))\n    // console.log('just defined spring: '+ offset.current)\n    if(!refscaledate.current) {\n        refscaledate.current = startdate\n    }\n\n    const bind = useGesture({\n\n        onDrag: ({  event, first, down, delta, velocity, direction, temp = {\n            xy: xy.getValue(),\n            laststeparea: 0,\n            deltaoffset: [0,0]\n            }\n        }) => {\n            let Xoffset = selector.current.parentElement.offsetWidth - (event.pageX?event.pageX:selector.current.parentElement.offsetWidth)\n            let Yoffset = (event.pageY?event.pageY:selector.current.parentElement.offsetHeight) - selector.current.offsetHeight/2\n\n            let steparea\n            let zoom\n\n            if(Yoffset > 0) {\n                steparea = Math.min(STEPS_UP.length-1,Math.floor((Xoffset-selector.current.offsetWidth)/60+1))\n                steparea = (steparea > STEPS_UP.length-1)?STEPS_UP.length:steparea\n                steparea = (steparea < 0)?0:steparea\n                zoom = STEPS_UP[steparea]\n            } else {\n                steparea = Math.min(STEPS_DOWN.length-1,Math.floor((Xoffset-selector.current.offsetWidth)/60+1))\n                steparea = (steparea > STEPS_DOWN.length-1)?STEPS_DOWN.length:steparea\n                steparea = (steparea < 0)?0:steparea\n                zoom = STEPS_DOWN[steparea]\n            }\n\n            // console.log(steparea)\n            let step = 1\n            // console.log(offset.current)\n            // if (Xoffset > selector.current.offsetWidth) steparea = 1\n            // if (Xoffset > selector.current.offsetWidth + 100) steparea = 2\n            \n            // for ( let i = 0 ; i < STEPS.length ; i++ ) {\n\n            // }\n            \n            if (steparea !== temp.laststeparea) {\n                \n                setZoomfactor(zoom)\n                setNewstart(scaledate)\n                temp.laststeparea = steparea\n                temp.xy = [0,0]\n                temp.deltaoffset = delta\n                \n            } \n\n            if (first) setActive(true)\n\n            velocity = (Math.abs(velocity)<.2)?0:velocity  \n            // console.log('velocity '+velocity) \n            \n            set({ \n                // xy: add(scale(sub(delta,temp.deltaoffset),step), temp.xy), \n                xy: add(scale(add(sub(delta,temp.deltaoffset),offset.current),step), temp.xy), \n                immediate: down, \n                config: { velocity: scale(direction, velocity*step), decay: true},\n                // config: { mass: 10, tension: 20 , friction: 40, precision: 1 },\n                // onFrame: ()=>{console.log('xy: '+xy.getValue())},\n                // config: config.gentle,\n                // config: {},\n                onFrame: ()=>{\n                    let newdate = new Date(newstart.getTime() - xy.getValue()[1] * zoomfactor)\n                    onDateChange(newdate)\n                    setScaledate(newdate)\n                    setlLastStartdate(newdate)\n                    refscaledate.current = newdate\n                    // offset.current = [0,0]\n                },\n                // onFrame: ()=>{onDateChange( olddate => new Date(olddate.getTime() + xy.getValue()[1] * 1000))},\n                // onFrame: setLiveDate(),\n                onRest: ()=>{\n                    if (!down) {\n                        // setTimeout(()=>setActive(false),1)\n                        setActive(false)\n                        let newdate = new Date(newstart.getTime() - xy.getValue()[1] * zoomfactor)\n                        onFinalDateChange(newdate)\n                        offset.current = [0,0]\n\n                    }\n                }\n            })\n            return temp\n        }\n    })\n\n\n    useEffect(() => {\n        // if(!active) onFinalDateChange(scaledate)  \n        \n        if(!active) {\n            offset.current[1] -= (startdate.getTime() - lastStartdate.getTime())  / zoomfactor\n            // console.log(offset.current[1]+ ' /  '+ (startdate.getTime() - lastStartdate.getTime()))\n            setScaledate(startdate)\n            setlLastStartdate(startdate)\n            onDateChange(startdate)\n        }\n    },[startdate])\n\n\n    return (\n        <animated.div {...bind()} className='DateSelector' ref={selector} >\n            <div className=\"Mask\"  >\n\n                <DateSelectorScale className='scale' date={scaledate} zoomfactor={zoomfactor} immediate={active}></DateSelectorScale>\n                \n                <div className=\"TriangleContainer\" >\n                    <svg height=\"40\" width=\"20\" className=\"Triangle\">\n                        <polygon points=\"20,5 20,35 12,20\" />   \n                    </svg> \n                </div>        \n            </div>\n\n        </animated.div>\n                                  )\n}\nexport default DateSelector\n","import React, {useState, useEffect, useRef} from 'react';\nimport DateLabel from './components/datelabel'\nimport DateController from './components/datecontroller'\nimport DateSelector from './components/dateselector'\n\n\nfunction DateManager({startdate, onDateChange, onFinalDateChange, searching}) {\n\n    const [selectorStartdate, setselectorStartdate] = useState(startdate)\n    const [controllerStartdate, setcontrollerStartdate] = useState(startdate)\n    const [labeldate, setLabelDate] = useState(startdate)\n\n    const handleSelectorDateChange = (date) => {\n        // console.log('handleSelectorDateChange:' + date.toJSON())\n        setLabelDate(date)\n        onDateChange(date)\n        // setscontrollerStartdate(date)\n    }\n\n    const handleSelectorFinalDateChange = (date) => {\n        // console.log('handleSelectorFinalDateChange:' + date.toJSON())\n        setcontrollerStartdate(date)\n        onFinalDateChange(date)\n    }\n    \n    const handleControllerDateChange = (date) => {\n        // console.log('handleControllerDateChange' + date.toJSON())\n        setselectorStartdate(date)\n    }\n\n    useEffect(() => {\n        // console.log('startdate in date manager: '+startdate.toJSON())\n        setselectorStartdate(startdate)\n    },[startdate])\n\n\n\n    return (\n        <div >\n          <DateController startdate={controllerStartdate} onDateChange={handleControllerDateChange}/>\n          <DateLabel date={labeldate} highlight='none' animated={searching}/>\n          <DateSelector startdate={selectorStartdate} onDateChange={handleSelectorDateChange} onFinalDateChange={handleSelectorFinalDateChange}/>\n        </div>\n    ) \n}\nexport default DateManager","import React, { useEffect, useState } from \"react\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './debug.css'\n\n\n\n\nfunction Debug() {\n\n    const [ debug, setDebug ] = useGlobal('debug')\n    const [ active, setActive ] = useState(false)\n    const [ debugkeys, setDebugkeys ] = useState([])\n    \n\n    useHotkeys(\"d\",()=>{setActive(active => !active)}) \n\n    useEffect(() => {\n        console.log('Debug Overlay Key: d')\n    }, []);\n\n    useEffect(() => {\n        if(active) {\n            console.log('debug txt: ')\n            console.log(debug)\n            let lines = debugkeys\n            lines[debug[1]] = debug[0]\n            setDebugkeys( lines )\n            console.log(lines)\n        }\n    }, [debug]);\n\n\n    useEffect(() => {\n        setDebug( ['Hi',0])\n    }, []);\n\n//     const listItems = numbers.map((number) =>\n//     <li>{number}</li>\n//   );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n\n    return (\n        <div className='Debug' style={{display: (active)?'inline':'none', width: '100%', height:'100%'}}>\n            {/* <div className='ContinuousScroll' style={{position: 'relative', top: '70%', right:0, width: 60, height:'100%', background:  'rgba(22, 22, 20, 0.24)'}}/> */}\n            <div className='DebugBox1'>\n                <ul>\n                    {debugkeys.map(item=><li key={item?item[1]:''}>{item?item:'free'}</li>)}\n                </ul>\n            </div> \n        </div>\n    )\n}\n\nexport default Debug\n","import React, {useState, useLayoutEffect, useEffect, useRef } from \"react\";\nimport {useSpring, animated} from 'react-spring';\nimport { useGesture } from 'react-use-gesture'\nimport { useGlobal } from 'reactn'\nimport { add, sub, scale } from 'vec-la'\nimport \"./controlpanel.css\"\n\nexport default function SlidePanel(props) {\n\n    const [ , setDebug ] = useGlobal('debug')\n\n    const [visible, setVisible] = useState(true)\n    const [{ xy }, set] = useSpring(() => ({ xy: [0, 0] }))\n\n    const slidePanel = useRef()\n\n    const toggle = () =>  {\n        setDebug(['toggle from: '+visible+' '+slidePanel.current.offsetWidth,2])\n        set({ xy: !visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n        setVisible(visible => !visible)\n    }\n\n    useEffect(() => {\n        setDebug(['visible: '+visible,1])\n        // set({ xy: visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n    },[visible])\n\n    useEffect(() => {\n        setTimeout(toggle,1000)\n        // set({ xy: visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n    },[])\n\n    const bind = useGesture({\n        onDrag: ({  first , event, direction, velocity, down,  delta, vxvy, temp={initTarget: '', xy: xy.getValue()}}) => {\n            // setDebug('tempX: '+add(temp.xy,delta)[0],1)\n            // setDebug('down: '+down,2)\n            if(first) temp.initTarget = event.target.getAttribute(\"class\")\n            if(temp.initTarget != 'ControlPanel') return\n            if(down) {\n                set({ xy: add(temp.xy,delta), immediate: true })\n                // set({ xy: newxy })\n            } else {\n                if(vxvy[0] > 0.2) {\n                    let config = {  velocity: scale(direction, velocity), decay: true, precision: 1 }\n                    setDebug(['visible: '+visible,1])\n                    set({ xy: [slidePanel.current.offsetWidth,0], immediate: false})\n                    setVisible(false)\n                } else {\n                    set({ xy: temp.xy, immediate: false })\n                }\n            }\n            return temp\n\n\n            // if(!down && vxvy[0] > 0.2) {\n            //     setVisible(state => !state)\n            // } else {\n\n            //     let newxy = add(temp.xy,delta)\n            //     setDebug('offsetWidth: '+slidePanel.current.offsetWidth)\n            //     // if(!down && vxvy[0] > 0.2) {\n            //     //     newxy = [slidePanel.current.offsetWidth,0]\n            //     // }\n                \n            //     set({ xy: newxy, immediate: down })\n            //     return temp\n\n            // }\n        }\n        },\n        { event: { passive: false } })\n\n\n    return (\n        <div>\n            <img className='Logo' draggable=\"false\" src={props.imageSrc} alt=''  onClick={toggle} />\n\n            <animated.div {...bind()} ref={slidePanel} className='ControlPanel' style={{ transform: xy.interpolate((x, y) => `translate3d(${x}px,0,0)`) }}>\n                    {props.children}\n            </animated.div>\n        </div>\n\n    )\n}","import React, { useEffect } from \"react\";\nimport { useGlobal } from 'reactn';\n\nimport { HuePicker, AlphaPicker } from 'react-color';\nimport './colorpicker.css'\n\n\n// should use a prop\n\nfunction ColorPicker() {\n\n\n    const [ appcolor, setAppcolor ] = useGlobal('appcolor');\n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    const handleChangeComplete = (color) => {\n        document.documentElement.style.setProperty('--color', color.hex);\n        //setAppcolor(color.hex );\n      };\n    \n    //console.log('mission rendering')\n    return (\n        <div className='ColorSelector'>\n            <HuePicker color={appcolor} onChangeComplete={handleChangeComplete }/>\n            \n            \n        </div>\n    )\n    // <AlphaPicker />  \n}\n\nexport default ColorPicker;\n","import React, { useState, useEffect } from \"react\";\nimport ClockController from \"./clockController\";\nimport Eww from \"./eww\";\nimport MissionSelector from \"./missionselector\";\nimport MapSelector from \"./mapselector\";\nimport Fullscreen from \"react-full-screen\";\nimport { useFullscreen } from '@straw-hat/react-fullscreen';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useGlobal } from 'reactn';\n\nimport \"./styles.css\"\nimport TimeSelector from \"./timeselector2\";\nimport TimeLabel from \"./timelabel\";\nimport MapStateLabel from \"./mapstatelabel\";\nimport DateManager from './datemanager'\n\nimport Debug from \"./debug\";\nimport SlidePanel from \"./slidepanel\";\nimport StepMask from './stepmask'\nimport ColorPicker from './colorpicker'\n\n\n\nconst App = () => {\n  //const [count, setCount] = useState(1000);\n  const [hasFetched, setFetch] = useState(false)\n\n  let initdate = new Date()\n  const [startdate, ] = useState(initdate)\n  // const [searching, ] = useState(false)\n  const [ searching, ] = useGlobal('searching')\n\n\n  const [ appdate, setAppdate ] = useGlobal('appdate')\n  const [, setSearchdate] = useGlobal('searchepoch')\n\n\n\n  \n  const [ mission, setMission ] = useGlobal('mission');\n    useEffect(() => {\n        console.log('Mission changed to: '+ mission)\n    }, [mission]);\n \n    const changeDate = (newdate) => {\n      // console.log('App changeDate callback: ' + newdate.toJSON())\n      setAppdate(newdate.getTime())\n    }\n    const changeFinalDate = (newdate) => {\n      // console.log('App final changeDate callback: ' + newdate.toJSON())\n      setSearchdate(newdate.getTime())\n    }\n    \n\n  \n  const [vertical, setVertical] = useState(true)\n  \n  useHotkeys(\"h\",() => {\n    setVertical(prevVertical => {\n        return (!prevVertical)\n      })\n    })\n\n\n  useEffect(() => {\n\n    const mockApi = () => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const randomInt = Math.ceil(Math.random() * 10)\n          console.log(\"mockApi done\")\n          resolve(randomInt)\n        }, 2000)\n      })\n    }\n    \n    async function doFetch() {\n      if (!hasFetched) {\n        const apiResponse = await mockApi();\n        setFetch(true);\n      }\n    }\n\n    doFetch()\n  }, []);\n  \n\n\n\n  const [isFull,setIsfull] = useState(false)\n  const { isFullscreen, toggleFullscreen } = useFullscreen(window.document.body);\n  // const [isControlPanel, setIscontrolpanel] = useState(false)\n  \n  useHotkeys(\"f\",toggleFullscreen )  \n  \n  //const [ appdate, setAppdate ] = useGlobal('appdate');\n  // const [ myname,  ] = useGlobal('appnames');\n  return (\n    <div className=\"App\">\n      <Fullscreen enabled={isFull} onChange={() =>  {if(!isFull) setIsfull(false)} }>\n\n      \n        {/* <div className=\"DateTimeLabel\" >\n          <TimeLabel vertical={vertical} />\n        </div>\n        \n        <div className=\"ClockController\">\n          <ClockController duration=\"600000\"/>\n        </div>  */}\n\n        <div className=\"Globe\">\n          <Eww id=\"globe\" starfield=\"true\" atmosphere='true' clon='0.5' clat='40' names='true'/>\n        </div>\n        <DateManager startdate={startdate}  searching={searching} onDateChange={changeDate} onFinalDateChange={changeFinalDate} />\n        \n        <div className='MissionLabel'>{mission}</div>\n        <MapStateLabel></MapStateLabel>\n        <SlidePanel active='false' imageSrc='./images/ESA_logo_white.png' >\n          <MissionSelector></MissionSelector>\n          <MapSelector></MapSelector>\n          <ColorPicker />\n        </SlidePanel>\n\n        <Debug action='Bonjour'/>\n\n      </Fullscreen>\n   </div>\n  );\n}\n\n\n        // <ControlPanel active='false' imageSrc='./images/EOi_logo.png' >\n        //         <MissionSelector></MissionSelector>\n        //         <MapSelector></MapSelector>\n        // </ControlPanel>\n\n// <ColorPicker />\n//         <StepMask/>\n\n        // <div className='MiniGlobe' >\n        //   <Eww id='miniglobe' clon='0.5' clat='40' myname={myname}/>  \n        // </div>  \n\n                // <img className='Logo' src='./images/EOi_logo.png' alt='' onClick={()=>setIscontrolpanel((isControlPanel => !isControlPanel))} />\n\n\n\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import { setGlobal } from 'reactn';\n\n\nexport  function initGlobalStates() {\n    console.log(\"init global: \"+(new Date()).getTime())\n\n    // Set current time as global state\n    // setGlobal({appdate: ((new Date()).getTime())})\n    // setGlobal({searchepoch: ((new Date()).getTime())})\n    // setGlobal({mission: 'S1'})\n    // setGlobal({searching: false})\n    // setGlobal({apppolygon: ''})\n    // setGlobal({replace: true})\n    // setGlobal({startend: {start:0, end:0}})\n    // setGlobal({setApppickeditems: []})\n\n\n    setGlobal({\n        appdate: (new Date()).getTime(),\n        searchepoch: (new Date()).getTime(),\n        mission: 'S1',\n        searching: false,\n        apppolygon: '',\n        replace: true,\n        startend: {start:0, end:0},\n        apppickeditems: []\n    })\n    \n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./app\";\nimport {initGlobalStates} from \"./initglobalstates\"\nimport registerServiceWorker from './registerServiceWorker';\n\n// if you're in create-react-app import the files as:\n// import store from \"./js/store/index\";\n// import App from \"./js/components/App.jsx\";\ninitGlobalStates()\n\nrender(\n  <App />,\n  // The target element might be either root or app,\n  // depending on your development environment\n  // document.getElementById(\"app\")\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();"],"sourceRoot":""}