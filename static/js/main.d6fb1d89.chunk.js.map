{"version":3,"sources":["useClock.js","clockController.js","wwwx/shapes/TexturedSurfaceShape.js","wwwx/shapes/TexturedSurfacePolygon.js","useEww.js","dhusToGeojson.js","useDatahub.js","searchmanager.js","eww.js","missionselector.js","mapselector.js","timeselector2.js","timelabel.js","mapstatelabel.js","debug.js","slidepanel.js","colorpicker.js","app.js","registerServiceWorker.js","initglobalstates.js","index.js"],"names":["useClock","_ref","autoStart","duration","initDate","startdate","_useState","useState","_useState2","Object","slicedToArray","date","setDate","_useState3","_useState4","playing","setPlaying","ldate","useRef","refreshRate","intervalRef","step","timeoutRef","start","console","log","current","setInterval","incrementDate","setTimeout","togglePause","clearTimeout","clearInterval","undefined","useEffect","Date","getTime","reset","increaseSpeed","Math","abs","decreaseSpeed","forceDate","newdate","ClockController","_useGlobal","useGlobal","_useGlobal2","appdate","setAppdate","_useClock","useHotkeys","lastTap","setLasttap","react_default","a","createElement","className","onClick","now","PickedObject","WorldWind","SurfacePolygon","SurfaceShape","useEww","id","clon","clat","alt","starfield","atmosphere","names","eww","setProjection","_useState5","_useState6","geojsonlayers","setGeojsonlayers","_useState7","_useState8","_useState9","latitude","longitude","altitude","aoi","pickedItems","_useState10","ewwstate","setEwwState","addQuicklookWMS","renderable","computeSectors","drawContext","Sector","FULL_SPHERE","wmsConfigQL","service","layerNames","title","numLevels","format","size","sector","levelZeroDelta","Location","qllayer","WmsLayer","userProperties","addLayer","redraw","layers","getLayerByName","name","i","length","displayName","enableRenderables","_x","_enableRenderables","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","time","j","renderableStartDate","renderableStopDate","wrap","_context","prev","next","includes","renderables","earthObservation","acquisitionInformation","acquisitionParameter","acquisitionStartTime","acquisitionStopTime","enabled","timeOffset","stop","setGlobeStates","lo","navigator","lookAtLocation","la","al","range","vp","bl","tr","view","viewport","polygon","pickTerrain","canvasCoordinates","x","y","height","terrainObject","position","round","err","width","getViewPolygon","objectSpread","viewpolygon","handleClick","recognizer","clientX","clientY","pickList","pick","removeLayer","highlighted","objects","userObject","push","handleDoubleClick","point","WorldWindow","redrawCallbacks","BasicWorldWindowController","prototype","applyLimits","WWMath","clamp","clickRecognizer","ClickRecognizer","numberOfClicks","doubleClickRecognizer","recognizeSimultaneouslyWith","maxClickInterval","tapRecognizer","TapRecognizer","numberOfTaps","doubleTapRecognizer","maxTapInterval","wmsConfigBg","wmsConfigNames","configuration","baseUrl","slice","starFieldLayer","StarFieldLayer","atmosphereLayer","AtmosphereLayer","quicklookLayer","RenderableLayer","layer","l","goToAnimator","travelTime","goTo","Position","deepPicking","removeGeojson","addGeojson","url","epoch","renderableLayer","properties","updated","ceil","random","GeoJSONParser","load","concat","toConsumableArray","geometry","placemarkAttributes","PlacemarkAttributes","imageScale","imageColor","Color","labelAttributes","offset","Offset","OFFSET_FRACTION","isPointType","isMultiPointType","attributes","isLineStringType","isMultiLineStringType","drawOutline","outlineColor","interiorColor","red","green","blue","outlineWidth","isPolygonType","isMultiPolygonType","ShapeAttributes","highlightAttributes","addWMS","toggleStarfield","toggleAtmosphere","setTime","toggleProjection","prevProj","supportedProjections","newProj","indexOf","globe","projection","ProjectionWgs84","ProjectionEquirectangular","ProjectionMercator","ProjectionPolarEquidistant","toggleNames","dhusToGeojson","response","mapFromHubOpenSearch","item","reshuffle","array","json","content","hubItem","assign","int","double","str","sizeInBytes","sizeArray","split","parseFloat","wellknown","footprint","type","ingestiondate","uuid","beginposition","endposition","downloadUrl","link","href","quicklookUrl","parentIdentifier","status","platform","platformShortName","platformname","platformSerialIdentifier","platformserialidentifier","sensor","instrument","instrumentshortname","operationalMode","sensoroperationalmode","relativePassNumber","parseInt","relativeorbitnumber","orbitNumber","orbitnumber","startTimeFromAscendingNode","stopTimeFromAscendingNode","orbitDirection","orbitdirection","productInformation","productType","producttype","message","features","feed","entry","Array","isArray","map","filter","totalResults","startIndex","itemsPerPage","useDatahub","geojsonResults","setGeojsonResults","loading","setLoading","searchepoch","_useGlobal3","startend","_useGlobal5","mission","_useGlobal7","apppolygon","_useGlobal9","_useGlobal10","gosearch","_SearchManager","_useGlobal4","setStartend","setReplace","_useGlobal11","_useGlobal12","setGosearch","windowSize","searchList","setSearchList","replacemode","setReplacemode","count","SearchDate","toJSON","startepoch","UTC","getUTCFullYear","getUTCMonth","getUTCDate","_startdate","_enddate","newSearchList","end","SearchManager","searchUrl","setSearchurl","fetchURL","_ref2","index","newurl","paging","geoJson","replace","totalresults","startindex","itemsperpage","fetch","mode","credentials","sent","Number","min","t0","t1","_x2","code","target","templateUrl","startIndexOrigin","dateOff","areaOff","find","collection","buildUrl","e","Eww","_useEww","_useDatahub","appstarfield","setAppstarfield","_useGlobal13","_useGlobal14","appatmosphere","setAppatmosphere","_useGlobal15","_useGlobal16","appnames","setAppnames","_useGlobal17","setSearching","_useGlobal19","setAppaltitude","_useGlobal21","setApplatitude","_useGlobal23","setApplongitude","_useGlobal25","_useGlobal26","setApppolygon","_useGlobal27","_useGlobal28","setApppickeditems","reactn_default","style","background","MissionSelector","setMission","draggable","src","MapSelector","_useGlobal6","TimeSelector","props","wid","setDebug","zoomfactor","max","hei","vertical","setSearchepoch","setHighlight","livePosition","setLiveposition","tsactive","setTsactive","setStep","myvertical","timecontainer","_useSpring","useSpring","xy","_useSpring2","set","bind","useGesture","onDrag","down","delta","velocity","distance","active","direction","wheeling","first","_ref$temp","last","temp","getValue","deltaOffset","deltaCumul","lastNewxy","lastStep","lastIncrement","lastTime","scale","parentElement","offsetHeight","div","sub","deltaFactor","newxy","add","pow","minX","offsetTop","maxX","config","mass","tension","friction","precision","immediate","onRest","_ref3","onFrame","onWheel","_ref4","event","_ref4$temp","persist","deltaY","_ref6","_ref5","timescale","setTimescale","useLayoutEffect","day","month","lastday","monthcode","year","lastmonth","tics","dayclass","monthclass","yearclass","getUTCHours","class","pos","label","key","top","left","scaleText","offsetWidth","zoom","points","ref","web","transform","interpolate","TimeLabel","highlight","searching","setYear","setMonth","setDay","dateFormat","MapStateLabel","appaltitude","apppickeditems","items","setItems","showQL","setShowQL","fontSize","display","Debug","debug","setActive","debugkeys","setDebugkeys","lines","SlidePanel","visible","setVisible","slidePanel","toggle","vxvy","initTarget","getAttribute","passive","imageSrc","children","ColorPicker","appcolor","lib","color","onChangeComplete","document","documentElement","setProperty","hex","App","hasFetched","setFetch","setVertical","prevVertical","mockApi","Promise","resolve","randomInt","_doFetch","doFetch","isFull","setIsfull","_useFullscreen","useFullscreen","window","body","toggleFullscreen","isFullscreen","dist_default","onChange","src_timelabel","clockController","timeselector2","src_mapstatelabel","src_missionselector","src_mapselector","src_colorpicker","src_debug_0","action","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","setGlobal","render","app","getElementById","URL","process","origin","addEventListener","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d6fb1d89.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\n\nexport function useClock({ autoStart, duration, startdate }) {\n    //console.log('useClock renders')\n    //const { autoStart, duration } = settings || {};\n  \n    let initDate = startdate\n    const [date, setDate] = useState(initDate)\n    const [playing, setPlaying] = useState(false)\n    const ldate = useRef();\n\n    // refresh rate in msec\n    const refreshRate = 50\n\n    function incrementDate(step) {\n        //setDate(prevDate => { return prevDate + step  });\n        ldate.current += step \n        //setDate((new Date(ldate.current)).getTime());\n        setDate(ldate.current);\n    }\n      \n\n      // Control functions\n    const intervalRef = useRef();\n    const step = useRef(refreshRate);\n    const timeoutRef = useRef();\n    \n\n    function increaseSpeed() {\n        step.current = (step.current > 0)? step.current *= 2:step.current /= 2\n        if(Math.abs(step.current) < refreshRate) step.current = refreshRate\n    }\n    function decreaseSpeed() {\n        step.current = (step.current > 0)? step.current /= 2:step.current *= 2\n        if(Math.abs(step.current) < refreshRate) step.current = -1 * refreshRate\n     }\n\n    function start() {\n        console.log(\"starting Timer... (will stop in \"+duration/1000+\" sec)\")\n        if (!intervalRef.current) {\n            intervalRef.current = setInterval(() => incrementDate(step.current), refreshRate);\n            setPlaying(true)\n        }\n        timeoutRef.current = setTimeout(() => {\n            togglePause()\n            //start()\n          }, duration);\n    }\n\n    function togglePause() {\n        console.log('toggle clock')\n        if(timeoutRef.current) clearTimeout(timeoutRef.current)\n        if (intervalRef.current) {\n            setPlaying(false)\n            clearInterval(intervalRef.current)\n            intervalRef.current = undefined\n        } else start()\n    }\n\n    function reset() {\n        console.log('reset')\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current)\n            intervalRef.current = undefined\n            setPlaying(false)\n        }\n        let initDate = (new Date()).getTime()\n        step.current = refreshRate\n        setDate(initDate)\n        ldate.current = initDate\n    }\n\n     \n    function forceDate(newdate) {\n        ldate.current = newdate\n    }\n\n\n    // didMount effect\n    useEffect(() => {\n        setDate((new Date()).getTime())\n        ldate.current = date\n        if (autoStart) {\n            start();\n        }\n        //return reset;\n    }, []);\n\n  \n  return { date, playing, togglePause, reset, increaseSpeed, decreaseSpeed, forceDate };\n}\n","import React, { useState, useEffect } from \"react\"\nimport { useClock } from \"./useClock\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\n\n\n\n\nfunction ClockController({ duration }) {\n\n    const [ appdate, setAppdate ] = useGlobal('appdate');\n\n    const {\n        date,\n        playing,\n        togglePause,\n        reset,\n        increaseSpeed,\n        decreaseSpeed,\n        forceDate\n    } = useClock({\n        autoStart: false,\n        duration: duration,\n        startdate: appdate\n    })\n\n\n    useHotkeys(\"t\",togglePause)\n    useHotkeys(\"r\",reset)\n    useHotkeys(\".\",increaseSpeed)\n    useHotkeys(\",\",decreaseSpeed)\n\n    //const dateLabel = (new Date(date) ).toUTCString()\n\n\n\n    useEffect(() => {\n        //console.log(\"useEffect (date) in ClockController\")\n        setAppdate(date)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[date]);\n\n    useEffect(() => {\n        //console.log(\"useEffect (appdate) in ClockController\")\n        //setAppdate(date)\n        forceDate(appdate)\n        //setAppdate({appdate: new Date(date)})\n    },[appdate]);\n\n    useEffect(() => {\n        //console.log(\"useEffect (init) in ClockController\")\n        //console.log(\"appdate changed\")\n        forceDate(appdate)\n    },[]);\n\n    const [lastTap, setLasttap] = useState()\n    const handleDoubleTap = () => {\n        console.log('pressed')\n        const now = Date.now();\n        if (lastTap && (now - lastTap) < 300) {\n          reset();\n        } else {\n            setLasttap(now)\n            togglePause()\n        }\n      }\n    \n    return (\n/*\n        <div {...handlers} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width:\"100%\", height: \"100%\"}}>\n            {(new Date(date) ).toUTCString()}\n        </div>\n\n<div onClick={togglePause}><img className='Buttons' src={playing?pauseImage:playImage} alt=''/></div>\n*/\n\n    <div className= 'ClockController' onClick={handleDoubleTap} ></div>\n    );\n}\n\nexport default ClockController;\n","import WorldWind from 'webworldwind-esa';\n\nconst PickedObject = WorldWind.PickedObject,\n    SurfacePolygon = WorldWind.SurfacePolygon,\n    SurfaceShape = WorldWind.SurfaceShape;\n\n/**\n * If no image is set, it behaves the same as a SurfaceShape.\n * To set an image pass it to the shape .image property (myShape.image = myImg;)\n *\n * Limitations with an image:\n * The boundaries have to define a quadrilateral (can be defined by 4 corners)\n * If the edges arc over the globe, the interior will not be filled properly\n * Shapes that cross the anti-meridian will not use the image\n * Performance is lower\n *\n * When used with an image it will divide the image in cells (based on the step, maxImageWidth, maxImageHeight values)\n * and draw each image cell to the canvas\n * This is a slow operation, try to keep the number of cells \"low\"\n * For example:\n * step = 1, maxImageWidth = 64, maxImageHeight = 64\n * will produce 4096 (64 * 64 * 1) cells\n */\nclass TexturedSurfaceShape extends SurfaceShape {\n    constructor(attributes) {\n        super(attributes);\n\n        /**\n         * Image to draw on the surface of the shape.\n         * @type {Image}\n         */\n        this.image = null;\n\n        /**\n         * Determines the division step of the image\n         * Lower numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.step = 1;\n\n        /**\n         * Resizes the image\n         * Higher numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.maxImageWidth = 64;\n        this.maxImageHeight = 64;\n    }\n\n    get image() {\n        return this._image;\n    }\n\n    set image(img) {\n        this._image = img;\n        this.stateKeyInvalid = true;\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    renderToTexture(dc, ctx2D, xScale, yScale, dx, dy) {\n        let attributes = (this.highlighted ? (this.highlightAttributes || this._attributes) : this._attributes);\n        let drawInterior = (!this._isInteriorInhibited && attributes.drawInterior);\n        let drawOutline = (attributes.drawOutline && attributes.outlineWidth > 0);\n        let pickColor;\n\n        if (!drawInterior && !drawOutline) {\n            return;\n        }\n\n        if (dc.pickingMode && !this.pickColor) {\n            this.pickColor = dc.uniquePickColor();\n        }\n\n        if (dc.pickingMode) {\n            pickColor = this.pickColor.toHexString();\n        }\n\n        if (this.crossesAntiMeridian || this.containsPole) {\n            if (drawInterior) {\n                this.draw(this._interiorGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                ctx2D.fill();\n            }\n            if (drawOutline) {\n                this.draw(this._outlineGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        } else {\n            if (this.image && !dc.pickingMode) {\n                ctx2D.save();\n            }\n            let points = this._interiorGeometry[0].map(location => ({\n                x: location.longitude * xScale + dx,\n                y: location.latitude * yScale + dy\n            }));\n            this.drawPoints(points, ctx2D);\n            if (drawInterior) {\n                if (this.image && !dc.pickingMode) {\n                    ctx2D.clip();\n                    this.drawImageToPolygon(ctx2D, this.image, points);\n                    ctx2D.restore();\n                }\n                else {\n                    ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                    ctx2D.fill();\n                }\n            }\n            if (drawOutline) {\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        }\n\n        if (dc.pickingMode) {\n            let po = new PickedObject(this.pickColor.clone(), this.pickDelegate ? this.pickDelegate : this,\n                null, this.layer, false);\n            dc.resolvePick(po);\n        }\n    }\n\n    drawPoints(points, ctx2D) {\n        ctx2D.beginPath();\n        ctx2D.moveTo(points[0].x, points[0].y);\n        for (let i = 1, len = points.length; i < len; i++) {\n            ctx2D.lineTo(points[i].x, points[i].y);\n        }\n    }\n\n    drawImageToPolygon(ctx, image, points) {\n        let canvasWidth = ctx.canvas.width;\n        let canvasHeight = ctx.canvas.height;\n\n        let offScreenCanvas = TexturedSurfaceShape.offScreenCanvas();\n        let offScreenCtx = TexturedSurfaceShape.offScreenCtx();\n\n        let corners = this.getCorners(points);\n        let axesDim = this.getAxesDimensions(corners);\n\n        let offScreenWidth = Math.min(axesDim.distX, this.maxImageWidth);\n        let offScreenHeight = Math.min(axesDim.distY, this.maxImageHeight);\n\n        offScreenCanvas.width = offScreenWidth;\n        offScreenCanvas.height = offScreenHeight;\n        offScreenCtx.drawImage(image, 0, 0, offScreenWidth, offScreenHeight);\n\n        let step = this.step;\n        let width = offScreenWidth - 1;\n        let height = offScreenHeight - 1;\n        let topLeft, topRight, bottomRight, bottomLeft, y1Current, y2Current, y1Next, y2Next;\n\n        for (let y = 0; y < height; y += step) {\n            y1Current = this.lerp(corners[0], corners[3], y / height);\n            y2Current = this.lerp(corners[1], corners[2], y / height);\n            y1Next = this.lerp(corners[0], corners[3], (y + step) / height);\n            y2Next = this.lerp(corners[1], corners[2], (y + step) / height);\n\n            for (let x = 0; x < width; x += step) {\n                topLeft = this.lerp(y1Current, y2Current, x / width);\n                topRight = this.lerp(y1Current, y2Current, (x + step) / width);\n                bottomRight = this.lerp(y1Next, y2Next, (x + step) / width);\n                bottomLeft = this.lerp(y1Next, y2Next, x / width);\n\n                let dWidth = Math.ceil(Math.max(step, Math.abs(topRight.x - topLeft.x), Math.abs(bottomLeft.x - bottomRight.x))) + 1;\n                let dHeight = Math.ceil(Math.max(step, Math.abs(topLeft.y - bottomLeft.y), Math.abs(topRight.y - bottomRight.y))) + 1;\n\n                if (this.isRectInsideCanvas(topLeft, dWidth, dHeight, canvasWidth, canvasHeight)) {\n                    ctx.drawImage(offScreenCanvas, x, y, step, step, topLeft.x, topLeft.y, dWidth, dHeight);\n                }\n            }\n        }\n    }\n\n    getCorners(points, bbox) {\n        bbox = bbox || this.getBbox(points);\n\n        let edgePoints = points.filter(point => this.isEdgePoint(point, bbox));\n\n        if (edgePoints.length === 5 &&\n            this.arePointsEqual(edgePoints[0], edgePoints[edgePoints.length - 1])) {\n            edgePoints.length = 4;\n        }\n\n        if (edgePoints.length > 4) {\n            let leftPoints = edgePoints.filter(point => point.x === bbox.minX);\n            let rightPoints = edgePoints.filter(point => point.x === bbox.maxX);\n\n            let {top: topLeft, bottom: bottomLeft} = this.getTopBottom(leftPoints);\n            let {top: topRight, bottom: bottomRight} = this.getTopBottom(rightPoints);\n\n            return [topLeft, topRight, bottomRight, bottomLeft];\n        }\n\n        let slope1 = this.getSlope(edgePoints[0], edgePoints[2]);\n        let slope2 = this.getSlope(edgePoints[1], edgePoints[3]);\n        let topLeftPoint = this.getTopLeftPoint(slope1, edgePoints[0], edgePoints[2]) ||\n            this.getTopLeftPoint(slope2, edgePoints[1], edgePoints[3]);\n\n        if (!topLeftPoint) {\n            console.log('Could not determine top left corner with the slope method');\n            return edgePoints;\n        }\n\n        let topLeftIndex = edgePoints.findIndex(point => point.x === topLeftPoint.x && point.y === topLeftPoint.y);\n        let newCorners = [];\n        for (let i = topLeftIndex; i < edgePoints.length + topLeftIndex; i++) {\n            newCorners.push(edgePoints[i % edgePoints.length]);\n        }\n\n        return newCorners;\n    }\n\n    getBbox(points) {\n        let bbox = {\n            minX: Number.MAX_SAFE_INTEGER,\n            maxX: Number.MIN_SAFE_INTEGER,\n            minY: Number.MAX_SAFE_INTEGER,\n            maxY: Number.MIN_SAFE_INTEGER,\n        };\n\n        return points.reduce((bbox, point) => {\n            bbox.minX = Math.min(bbox.minX, point.x);\n            bbox.maxX = Math.max(bbox.maxX, point.x);\n            bbox.minY = Math.min(bbox.minY, point.y);\n            bbox.maxY = Math.max(bbox.maxY, point.y);\n\n            return bbox;\n        }, bbox);\n    }\n\n    getTopBottom(points) {\n        return points.reduce((acc, point) => {\n            if (point.y < acc.top.y) {\n                acc.top = point;\n            }\n\n            if (point.y > acc.bottom.y) {\n                acc.bottom = point;\n            }\n\n            return acc;\n        }, {top: points[0], bottom: points[0]});\n    }\n\n    distance(p1, p2) {\n        let dx = p1.x - p2.x;\n        let dy = p1.y - p2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    isEdgePoint(point, bbox) {\n        return (\n            point.x === bbox.minX || point.x === bbox.maxX ||\n            point.y === bbox.minY || point.y === bbox.maxY\n        );\n    }\n\n    arePointsEqual(p1, p2) {\n        return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    getSlope(p1, p2) {\n        return (p1.y - p2.y) / (p1.x - p2.x);\n    }\n\n    getTopLeftPoint(slope, point1, point2) {\n        if (slope <= 0) {\n            return null;\n        }\n\n        if (point1.y < point2.y) {\n            return point1;\n        }\n\n        return point2;\n    }\n\n    getAxesDimensions(corners) {\n        let dx = Math.abs(corners[0].x - corners[1].x);\n        let dy = Math.abs(corners[0].y - corners[1].y);\n\n        let distX = 0;\n        let distY = 0;\n\n        if (dx > dy) {\n            distX = this.distance(corners[0], corners[1]);\n            distY = this.distance(corners[0], corners[3]);\n        }\n        else {\n            distX = this.distance(corners[0], corners[3]);\n            distY = this.distance(corners[0], corners[1]);\n        }\n\n        return {distX, distY};\n    }\n\n    lerp(p1, p2, t) {\n        return {\n            x: p1.x + (p2.x - p1.x) * t,\n            y: p1.y + (p2.y - p1.y) * t\n        };\n    }\n\n    isRectInsideCanvas(point, width, height, canvasWidth, canvasHeight) {\n        return (\n            point.x + width >= 0 &&\n            point.x <= canvasWidth &&\n            point.y + height >= 0 &&\n            point.y < canvasHeight\n        );\n    }\n\n    static offScreenCanvas() {\n        if (!TexturedSurfaceShape.canvas) {\n            TexturedSurfaceShape.canvas = document.createElement('canvas');\n        }\n        return TexturedSurfaceShape.canvas;\n    }\n\n    static offScreenCtx() {\n        if (!TexturedSurfaceShape.ctx) {\n            let canvas = TexturedSurfaceShape.offScreenCanvas();\n            TexturedSurfaceShape.ctx = canvas.getContext('2d');\n        }\n        return TexturedSurfaceShape.ctx;\n    }\n}\n\nexport default TexturedSurfaceShape;","import WorldWind from 'webworldwind-esa';\nimport TexturedSurfaceShape from './TexturedSurfaceShape';\n\nconst SurfacePolygon = WorldWind.SurfacePolygon;\n\n/**\n * @exports TexturedSurfacePolygon\n */\nclass TexturedSurfacePolygon extends TexturedSurfaceShape {\n    /**\n     * Constructs Textured Surface Polygon. The polygon is drawn using the standard attributes. Unlike the standard\n     * surface polygon it draws associated image on the area of the polygon.\n     * @param boundaries {Location[]} Array of locations enclosing the surface polygon.\n     * @param attributes {ShapeAttributes} Attributes used for the styling of the Surface Polygon\n     */\n    constructor(boundaries, attributes) {\n        super(attributes);\n\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - constructor - The specified boundary is not an array.');\n        }\n\n        /**\n         * Boundaries relevant for the current polygon.\n         * @type {Location[]}\n         * @memberof TexturedSurfacePolygon.prototype\n         * @public\n         */\n        this.boundaries = boundaries;\n\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    get boundaries() {\n        return this._boundaries;\n    }\n\n    set boundaries(boundaries) {\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - set boundaries - The specified boundary is not an array.');\n        }\n\n        this.resetBoundaries();\n        this._boundaries = boundaries;\n        this._stateId = SurfacePolygon.stateId++;\n        this.stateKeyInvalid = true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeStateKey() {\n        return TexturedSurfacePolygon.staticStateKey(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeBoundaries(dc) {\n    }\n\n    static staticStateKey(shape) {\n        return SurfacePolygon.staticStateKey(shape) + \" pg \" + shape._stateId;\n    }\n}\n\nexport default TexturedSurfacePolygon;","import React, { useState, useEffect, useRef } from \"react\";\nimport WorldWind from \"webworldwind-esa\";\nimport TexturedSurfacePolygon from './wwwx/shapes/TexturedSurfacePolygon'\n\n\n// BasicWorldWindowController.prototype.applyLimits = function () {\n//     var navigator = this.wwd.navigator;\n\n//     // Clamp latitude to between -90 and +90, and normalize longitude to between -180 and +180.\n//     navigator.lookAtLocation.latitude = WWMath.clamp(navigator.lookAtLocation.latitude, -90, 90);\n//     navigator.lookAtLocation.longitude = Angle.normalizedDegreesLongitude(navigator.lookAtLocation.longitude);\n\n//     // Clamp range to values greater than 1 in order to prevent degenerating to a first-person navigator when\n//     // range is zero.\n//     navigator.range = WWMath.clamp(navigator.range, 1, Number.MAX_VALUE);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.heading = Angle.normalizedDegrees(navigator.heading);\n\n//     // Clamp tilt to between 0 and +90 to prevent the viewer from going upside down.\n//     navigator.tilt = WWMath.clamp(navigator.tilt, 0, 90);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.roll = Angle.normalizedDegrees(navigator.roll);\n\n//     // Apply 2D limits when the globe is 2D.\n//     if (this.wwd.globe.is2D() && navigator.enable2DLimits) {\n//         // Clamp range to prevent more than 360 degrees of visible longitude. Assumes a 45 degree horizontal\n//         // field of view.\n//         var maxRange = 2  Math.PI  this.wwd.globe.equatorialRadius;\n//         navigator.range = WWMath.clamp(navigator.range, 1, maxRange);\n\n//         // Force tilt to 0 when in 2D mode to keep the viewer looking straight down.\n//         navigator.tilt = 0;\n//     }\n// };\n\nexport function useEww({ id, clon, clat, alt, starfield, atmosphere, names }) {\n    //console.log('useEww renders')\n    \n  \n    const eww = useRef(null)\n    const [projection, setProjection] = useState(\"3D\")\n    // const [aoi, setAoi] = useState({type: null, value: null})\n    const [aoi, setAoi] = useState('')\n    const [geojsonlayers, setGeojsonlayers] = useState([])\n    const [quicklooklayers, setQuicklooklayers] = useState([])\n    const [ewwstate, setEwwState] = useState({latitude: clat, longitude: clon, altitude: alt, aoi:'', pickedItems: []})\n\n    //toggle atmosphere\n    function toggleAtmosphere() {\n        console.log('toggleAtmosphere')\n        eww.current.layers[3].enabled = !eww.current.layers[3].enabled\n        eww.current.redraw();\n    }\n\n    //toggle starField\n    function toggleStarfield() {\n        console.log('toggleStarfield')\n        eww.current.layers[2].enabled = !eww.current.layers[2].enabled\n        eww.current.redraw();\n    }\n\n    //toggle name overlay\n    function toggleNames() {\n        console.log('toggleNames')\n        eww.current.layers[1].enabled = !eww.current.layers[1].enabled\n        eww.current.redraw();\n    }\n\n    function  getViewPolygon () {\n        let view = eww.current.viewport\n        let area = {}\n        let polygon = ''\n        // console.log('view: ' + view.x + '/' + view.y + '/' + view.width + '/' + view.height);\n\n        let bl ;\n        try { \n            bl =  eww.current.pickTerrain(eww.current.canvasCoordinates(view.x, view.y + view.height)).terrainObject().position\n            bl.latitude = Math.round(bl.latitude * 10000)/10000\n            bl.longitude = Math.round(bl.longitude * 10000)/10000\n        }\n        catch(err) {bl = null;}\n\n\n        let tr ;\n        try { \n            tr = eww.current.pickTerrain(eww.current.canvasCoordinates(view.x + view.width, view.y)).terrainObject().position\n            tr.latitude = Math.round(tr.latitude * 10000)/10000\n            tr.longitude = Math.round(tr.longitude * 10000)/10000\n        }\n        catch(err) {tr = null;}\n\n        //console.log(bl.longitude+'/'+bl.latitude+'/'+tr.longitude+'/'+tr.latitude);\n        if(bl == null || tr == null )  {\n            //   area = {type:\"bbox\", value:\"-180,-90,180,90\"};\n              polygon = ''\n        } else {\n              area = {\n                    type: \"bbox\",\n                    value:\n                           bl.longitude +','\n                          + bl.latitude +','\n                          +tr.longitude +','\n                          +tr.latitude\n              };\n\n              polygon = 'POLYGON((' \n                + bl.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + bl.latitude + '))' \n        }\n        return polygon\n\n    }\n    \n    const addGeojson = (url,epoch) => {\n\n        // console.log('replace: '+replace)\n\n        function shapeConfigurationCallback(geometry, properties) {\n            let configuration = {};\n            configuration.userProperties = properties\n    \n            let placemarkAttributes = new WorldWind.PlacemarkAttributes(null);\n            placemarkAttributes.imageScale = 10;\n            placemarkAttributes.imageColor = new WorldWind.Color(0, 1, 1, 0.2);\n            placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n                WorldWind.OFFSET_FRACTION, 5,\n                WorldWind.OFFSET_FRACTION, 5);\n            //placemarkAttributes.imageSource = whiteDot;\n    \n    \n            if (geometry.isPointType() || geometry.isMultiPointType()) {\n                configuration.attributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);\n                \n            } else if (geometry.isLineStringType() || geometry.isMultiLineStringType()) {\n                configuration.attributes.drawOutline = true;\n                configuration.attributes.outlineColor = new WorldWind.Color(\n                    0.1 * configuration.attributes.interiorColor.red,\n                    0.3 * configuration.attributes.interiorColor.green,\n                    0.7 * configuration.attributes.interiorColor.blue,\n                    1\n                );\n                configuration.attributes.outlineWidth = 1;\n            } else if (geometry.isPolygonType() || geometry.isMultiPolygonType()) {\n                configuration.attributes = new WorldWind.ShapeAttributes(null);\n                configuration.attributes.interiorColor = new WorldWind.Color(1, 0, 0, 0.2);\n                configuration.attributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.3);\n\n                configuration.highlightAttributes = new WorldWind.ShapeAttributes(configuration.attributes);\n                configuration.highlightAttributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.4);\n                configuration.highlightAttributes.interiorColor = new WorldWind.Color(1, 0, 0, 0);\n                // configuration.attributes.outlineWidth = 0.3;\n\n                // configuration.attributes.applyLighting = true;\n                // configuration.attributes.imageSource = properties.quicklookUrl\n\n            }\n    \n            //console.log(configuration.attributes);\n            return configuration;\n        }\n\n        \n        function loadCompleteCallback() {\n            console.log(renderableLayer)\n            setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n            enableRenderables(epoch) // uncomment to disable renderables\n            eww.current.redraw();\n        }\n    \n        // if (replace) removeGeojson()\n        let renderableLayer = new WorldWind.RenderableLayer('Products: '+url.properties.updated+Math.ceil(Math.random() * 10000))\n        \n        eww.current.addLayer(renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers(eww.current.layers)\n        let geoJson = new WorldWind.GeoJSONParser(url);\n        geoJson.load(loadCompleteCallback, shapeConfigurationCallback, renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])        \n    }\n\n    function removeGeojson() {\n        for(let i=0;i<geojsonlayers.length;i++) {\n          eww.current.removeLayer(geojsonlayers[i])\n        //   console.log('removing json layers: ')\n        //   console.log(geojsonlayers[i])\n        }\n        setGeojsonlayers((geojsonlayers)=>[])\n        // console.log(geojsonlayers)\n        eww.current.redraw();\n      }\n\n    function addWMS() {\n    }\n\n    function addQuicklookWMS(renderable) {\n\n        console.log(renderable.computeSectors(eww.current.drawContext))\n        console.log(WorldWind.Sector.FULL_SPHERE)\n\n        // for S2:  \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S2L1C_TRUE_COLOR&styles=&format=image/png&transparent=true&version=1.1.1&width=1500&height=1000&srs=EPSG:4326&bbox=12.357903,41.800495,12.625694,41.984760\n\n        \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S1B_IW_GRDH_1SDV_20190520T050758_20190520T050823_016323_01EB81_6EB6&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A3857&bbox=2035059.441064533,7044436.526761846,2191602.4749925737,7200979.560689885\n        let wmsConfigQL = {\n            service: \"https://view.onda-dias.eu/instance00/ows\",\n            // layerNames: renderable.userProperties.title,\n            // layerNames: 'S2L1C_TRUE_COLOR',\n            layerNames: 'S1_IW_GRDH_FullResolution',\n            \n            // title: renderable.userProperties.title,\n            title: 'quicklook',\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: renderable.computeSectors(eww.current.drawContext)[0],\n            // sector: renderable.sector,\n            // sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n\n        // let wmsConfigQL = {\n        //     service: \"https://tiles.maps.eox.at/wms\",\n        //     layerNames: \"overlay_bright\",\n        //     title: \"overlay_bright\",\n        //     numLevels: 19,\n        //     format: \"image/png\",\n        //     size: 256,\n        //     sector: WorldWind.Sector.FULL_SPHERE,\n        //     levelZeroDelta: new WorldWind.Location(90, 90)\n        // }\n        // eww.current.removeLayer(getLayerByName('quicklook') )\n        let qllayer =  new WorldWind.WmsLayer(wmsConfigQL, renderable.userProperties.date)\n        eww.current.addLayer(qllayer)\n        eww.current.redraw()\n        console.log(eww.current.layers)\n    }\n\n    function getLayerByName(name) {\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            // console.log('display name: '+eww.current.layers[i].displayName)\n            if (eww.current.layers[i].displayName === name) return eww.current.layers[i]\n        }\n        return null\n    }\n\n    async function enableRenderables(time) {\n        let timeOffset = 1000 * 60 * 60 * 3 // 3 hours\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            if (eww.current.layers[i].displayName.includes('Products:')) {\n                \n                for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                    let renderable = eww.current.layers[i].renderables[j]\n                    if (time != 0) {\n                        let renderableStartDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStartTime)).getTime()\n                        let renderableStopDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStopTime)).getTime()\n                        renderable.enabled = (renderableStartDate <= time+timeOffset/2 && renderableStopDate >= time-timeOffset/2) ? true : false   \n                    } else {\n                        renderable.enabled = false\n                    }         \n                }\n            }\n            if (eww.current.layers[i].displayName === 'quicklook') {\n                // eww.current.layers[i].enabled = \n            }\n        }\n\n    }\n\n    function addQuicklook(renderable) {\n\n        function imageLoader(url, useCredentials) {\n            return new Promise((resolve, reject) => {\n                const img = new Image();\n        \n                img.onload = function() {\n                    resolve(img);\n                };\n        \n                img.onerror = function(e){\n                    reject(e);\n                };\n        \n                img.crossOrigin = useCredentials ? 'Use-Credentials' : 'Anonymous';\n                img.src = url;\n                console.log(' adding QL')\n            });\n        }\n\n\n        // console.log(' adding QL')\n        //  console.log(renderable.attributes)\n        // let quicklook =  new TexturedSurfacePolygon(renderable.sector)\n        // let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n        // // quicklookLayer.addRenderable(quicklook)\n        // // setQuicklooklayers((quicklooklayers)=>[...quicklooklayers,quicklookLayer])\n        // // eww.current.addLayer(quicklookLayer)\n        // let ql = new Image()\n        // ql.src = renderable.userProperties.quicklookUrl\n        // quicklook.image = ql\n        \n        imageLoader(renderable.userProperties.quicklookUrl,true).then(image => {\n            let quicklookLayer = getLayerByName('Quicklooks')\n            removeQuicklooks()\n            let footprint = [\n                renderable.boundaries[0][0],\n                renderable.boundaries[0][3],\n                renderable.boundaries[0][2],\n                renderable.boundaries[0][1]\n            ]\n            // footprint[0].pop()\n            console.log(footprint)\n            let quicklook =  new TexturedSurfacePolygon(footprint,renderable.attributes)\n            quicklook.maxImageWidth = 64\n            quicklook.maxImageHeight = 64\n            \n            quicklook.image = image\n            quicklookLayer.addRenderable(quicklook)\n            eww.current.addLayer(quicklookLayer)\n            eww.current.redraw()\n        })\n    }\n\n    function removeQuicklooks() {\n        getLayerByName('Quicklooks').removeAllRenderables()\n        eww.current.redraw()\n    }\n\n    function setTime(epoch) {\n        getLayerByName('StarField').time = getLayerByName('Atmosphere').time = new Date(epoch)\n        enableRenderables(epoch)\n        // console.log('display name: ')\n        // console.log(getLayerByName('StarField').displayName)\n        eww.current.redraw();\n        \n\n     }\n\n\n    function toggleProjection() {\n        setProjection( prevProj => {\n          console.log(\"prevProjection: \"+prevProj)\n          let supportedProjections = [ \"3D\", \"Equirectangular\", \"Mercator\"];\n          let newProj = (supportedProjections.indexOf(prevProj) + 1)%supportedProjections.length\n          console.log(\"newProjection: \"+supportedProjections[newProj])\n          switch (supportedProjections[newProj]) {\n            case \"3D\":\n                eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n                break;\n            case \"Equirectangular\":\n                eww.current.globe.projection = new WorldWind.ProjectionEquirectangular();\n                break;\n            case \"Mercator\":\n                eww.current.globe.projection = new WorldWind.ProjectionMercator();\n                break;\n            case \"North Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"North\");\n                break;\n            case \"South Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"South\");\n                break;\n            default:\n            eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n            }\n          eww.current.redraw();\n          return supportedProjections[newProj]\n          })      \n      }\n\n    // callback from eww   \n    const setGlobeStates = () => {\n        \n        let lo = eww.current.navigator.lookAtLocation.longitude\n        let la = eww.current.navigator.lookAtLocation.latitude\n        let al = eww.current.navigator.range\n        let vp = (al < 2000000?getViewPolygon():'')\n\n        setEwwState((ewwstate) => { return {...ewwstate, longitude:lo, latitude: la, altitude: al, viewpolygon: vp}}) \n\n    }\n\n    // handler for tap/click\n\n    const handleClick  = (recognizer) => {\n        // console.log('click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        // Perform the pick. Must first convert from window coordinates to canvas coordinates, which are\n        // relative to the upper left corner of the canvas rather than the upper left corner of the page.\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n        console.log(pickList)\n        if (pickList.terrainObject()) {\n            // position = pickList.terrainObject().position;\n            // store list of selected footprints in a string for later comparison\n            eww.current.removeLayer(getLayerByName('quicklook') )\n            // de-highlight all rendereables\n            for (let i = 0; i < eww.current.layers.length; i++) {\n                if (eww.current.layers[i].displayName.includes('Products:')) {                    \n                    for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                        let renderable = eww.current.layers[i].renderables[j]\n                        renderable.highlighted = false\n                    }\n                }\n            }\n    \n            // ... and now highlight all picked rendereables\n            let pickedItems = []\n            for (let i = 0; i < pickList.objects.length; i++) {\n                if (pickList.objects[i].userObject instanceof WorldWind.SurfaceShape) {\n                    pickedItems.push(pickList.objects[i].userObject) \n                    pickList.objects[i].userObject.highlighted = !pickList.objects[i].userObject.highlighted\n                    \n                    addQuicklookWMS(pickList.objects[i].userObject)\n                }\n            }\n            console.log(pickedItems)\n            setEwwState((ewwstate) => { return {...ewwstate, pickedItems: pickedItems}})\n            eww.current.redraw()\n        } else {\n            console.log('No position !');\n            return;\n        }\n\n\n    }\n\n    const handleDoubleClick  = (recognizer) => {\n        console.log('double click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n\n        let position;\n  \n  \n        // Get coordinates of clicked point and list of selected footprints. Do nothing if click done outside the globe.\n        if (pickList.terrainObject()) {\n            position = pickList.terrainObject().position;\n            // eww.current.goTo(new WorldWind.Location(position.latitude, position.longitude));\n\n            let point = \"POINT(\"+position.longitude+' '+position.latitude+\")\"\n            \n            setEwwState((ewwstate) => { return {...ewwstate, aoi: point}}) \n    \n        } else {\n              console.log('No position !');\n              setEwwState((ewwstate) => { return {...ewwstate, aoi: ''}})\n        }\n  \n        \n\n       \n    }\n\n    // useEffect(() => {\n    //     console.log(\"useEffect aoi: \" + aoi)\n    //     let newewwstate = {...ewwstate, aoi: aoi}\n    //     setEwwState(newewwstate)\n    // }, [aoi]); \n\n    // didMount effect\n    useEffect(() => {\n        console.log(\"useEffect (mount) in Eww  star/atmo: \"+ starfield+'/'+atmosphere)\n        // eww.current = new WorldWind.WorldWindow(id, elevationModel);\n        eww.current = new WorldWind.WorldWindow(id);\n        eww.current.redrawCallbacks.push(setGlobeStates)\n\n        // Define a min/max altitude limit\n        WorldWind.BasicWorldWindowController.prototype.applyLimits = function () {\n            eww.current.navigator.range = WorldWind.WWMath.clamp(eww.current.navigator.range, 2000, 300000000);\n        }\n\n        // define click/tap recognisers\n        // let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        // tapRecognizer.numberOfTaps = 1;\n        // let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        // doubleTapRecognizer.numberOfTaps = 2;\n        // doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n\n        let clickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleClick);\n        clickRecognizer.numberOfClicks = 1;\n        let doubleClickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleDoubleClick);\n        doubleClickRecognizer.numberOfClicks = 2;\n        doubleClickRecognizer.recognizeSimultaneouslyWith(clickRecognizer);\n        doubleClickRecognizer.maxClickInterval = 200;\n\n        let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        tapRecognizer.numberOfTaps = 1;\n        let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        doubleTapRecognizer.numberOfTaps = 2;\n        doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n        doubleTapRecognizer.maxTapInterval = 200;\n\n\n\n        //setWwd(eww);\n        let wmsConfigBg = {\n            service: \"https://tiles.maps.eox.at/wms\",\n            layerNames: \"s2cloudless-2018\",\n            title: \"s2cloudless-2018\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n    \n        let wmsConfigNames = {\n            service: \"https://tiles.maps.eox.at/wms\",\n            layerNames: \"overlay_bright\",\n            title: \"overlay_bright\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n        WorldWind.configuration.baseUrl = WorldWind.configuration.baseUrl.slice(0,-3)\n        let starFieldLayer = new WorldWind.StarFieldLayer();\n        let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_01deg.jpg');\n        // let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_3km.jpg');\n        \n        //atmosphereLayer.minActiveAltitude = 5000000\n\n        let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n    \n        let layers = [\n            { layer: new WorldWind.WmsLayer(wmsConfigBg, \"\"), enabled: true },\n            { layer: new WorldWind.WmsLayer(wmsConfigNames, \"\"), enabled: names },\n            { layer: starFieldLayer, enabled: starfield },\n            { layer: atmosphereLayer, enabled: atmosphere },\n            { layer: quicklookLayer, enabled: true }\n        ];\n    \n        for (let l = 0; l < layers.length; l++) {\n            layers[l].layer.enabled = layers[l].enabled;\n            eww.current.addLayer(layers[l].layer);\n        }\n        //let date = new Date();\n        starFieldLayer.time = new Date();\n        atmosphereLayer.time = new Date();\n        setTimeout(() => {\n            eww.current.goToAnimator.travelTime = 1000;\n            eww.current.goTo(new WorldWind.Position(clat, clon, alt));\n            eww.current.redraw();\n            }, 2000)\n    \n        eww.current.redraw();\n        eww.current.deepPicking = true;\n        // eww.current.orderedRenderingFilters.push(declutterByTime)\n    }, []); // effect runs only once\n        \n  \n  return { ewwstate, removeGeojson, addGeojson, addWMS, toggleStarfield, toggleAtmosphere, setTime, toggleProjection, toggleNames };\n}\n","import wellknown from 'wellknown';\n\nexport default function dhusToGeojson(response) {\n\n    \n    function mapFromHubOpenSearch(item) {    \n        function reshuffle(array) {\n            let json = {};\n            for(let i=0; i < array.length; i++) {\n                json[array[i].name] =  array[i].content;\n            }\n            return json;\n        }\n\n        try {\n            let hubItem = {};\n            if(item.date) Object.assign(hubItem,reshuffle(item.date));\n            if(item.int) Object.assign(hubItem,reshuffle(item.int));\n            if(item.double) Object.assign(hubItem,reshuffle(item.double));\n            if(item.str) Object.assign(hubItem,reshuffle(item.str));\n\n\n            var sizeArray = hubItem.size.split(\" \");\n            var sizeInBytes;\n            switch (sizeArray[1]) {\n                case \"B\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0]));\n                    break;\n                case \"MB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024);\n                    break;\n                case \"GB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024*1024);\n                    break;\n                case \"TB\":\n                    sizeInBytes = Math.round(parseFloat(sizeArray[0])*1024*1024*1024);\n                    break;\n                default: \n                    sizeInBytes = Math.round(parseFloat(sizeArray[0]));\n                    break;\n\n            }\n            \n\n            var newItem = {\n                id: item.title,\n                geometry: wellknown(hubItem.footprint),\n                type: \"Feature\",\n                properties: {\n                    updated: new Date(hubItem.ingestiondate),\n                    title: item.title,\n                    name: item.title,\n                    uuid: item.id,\n                    date: hubItem.beginposition  +'/'+  hubItem.endposition,\n                    downloadUrl: item.link[0].href,\n                    quicklookUrl: (item.link.length >= 2) ? item.link[2].href: null,\n                    // links: {\n                    //     data: [{\n                    //         href: item.link[0].href,\n                    //     }]\n                    // },\n                    earthObservation: {\n                        parentIdentifier: \"\",\n                        status: \"ARCHIVED\",\n                        acquisitionInformation: [{\n                            platform: {\n                                platformShortName: hubItem.platformname,\n                                platformSerialIdentifier: hubItem.platformserialidentifier\n                            },\n                            sensor: {\n                                instrument: hubItem.instrumentshortname,\n                                operationalMode: hubItem.sensoroperationalmode\n                            },\n                            acquisitionParameter: {\n                                acquisitionStartTime: new Date(hubItem.beginposition),\n                                acquisitionStopTime: new Date(hubItem.endposition),\n                                relativePassNumber: parseInt(hubItem.relativeorbitnumber),\n                                orbitNumber: parseInt(hubItem.orbitnumber),\n                                startTimeFromAscendingNode: null,\n                                stopTimeFromAscendingNode: null,\n                                orbitDirection: hubItem.orbitdirection\n\n                            }\n                        }],\n                        productInformation: {\n                            productType: hubItem.producttype,\n                            //timeliness: indexes[\"product\"][\"Timeliness Category\"],\n                            size: sizeInBytes\n                        }\n                    }\n                }\n            }\n        \n            return newItem;\n        } catch (err) {\n            console.log(\"error parsing item from dhus: \"+err.message);\n            return {};\n        }\n    }\n\n    let features = [];\n    try {\n        if( response.feed.entry ) {\n            if(Array.isArray(response.feed.entry)) {\n                console.log('entry is an  array')\n                features = response.feed.entry.map( item =>  mapFromHubOpenSearch(item)).filter(item => item !== {});\n            } else {\n                features = [mapFromHubOpenSearch(response.feed.entry)]\n            }\n                \n        } else {\n            features = []\n        }\n        \n    } catch (err) {\n        console.log(response);\n        console.log(\"Error: \");\n        console.log(err);\n        features = []\n    }\n    //console.log(JSON.stringify(features));\n    let geojson = {   \n            type: \"FeatureCollection\",\n            id: \"search\",\n            properties: {\n                totalResults: response.feed[\"opensearch:totalResults\"],\n                startIndex: (response.feed[\"opensearch:startIndex\"])?response.feed[\"opensearch:startIndex\"]:1,\n                itemsPerPage: response.feed[\"opensearch:itemsPerPage\"],\n                title: \"DHuS search response\",\n                updated: new Date()\n            },\n            features: features\n        };\n\n    return geojson\n\n}\n","import { useState, useEffect } from \"react\";\nimport dhusToGeojson from \"./dhusToGeojson\";\nimport { useGlobal } from 'reactn';\nimport dateFormat from \"dateformat\"\nimport SearchManager from './searchmanager'\n\n\n\n\nexport default function useDatahub() {\n\n\n    const buildUrl = ({code, polygon, start, end, startindex}) => {\n\n\n        \n        let collections = [\n            {\n                code: 'S1',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-1 AND producttype:GRD)&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-1 A/B GRD' ,\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S2',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-2 AND producttype:S2MSI1C)&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-2 A/B Level 1C',\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S3',\n                templateUrl: 'https://131.176.236.55/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-3 AND (producttype:OL_1_ERR___ OR producttype:SL_1_RBT___ OR producttype:SR_1_SRA___))&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-3 A/B, OLCI/SLSTR/SRAL' ,\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'S5P',\n                templateUrl: 'https://s5phub.copernicus.eu/dhus/search?q=( footprint:\"Intersects({polygon})\" AND beginposition:[{start} TO {end}] AND platformname:Sentinel-5 precursor AND (producttype:L1B_RA_BD1 OR (producttype:L2__NO2___ AND processingmode:Near real time)))&start={startindex}&rows=100&sortedby=beginposition&order=desc&format=json',\n                name: 'Sentinel-1 A/B',\n                startIndexOrigin: 0,\n                dateOff: ' beginposition:[{start} TO {end}] AND',\n                areaOff:  ' footprint:\"Intersects({polygon})\" AND'\n            },\n            {\n                code: 'ENVISAT',\n                templateUrl: 'https://eocat.esa.int/ngeo/catalogue/FEDEO-ENVISAT.ASA.IMP_1P/search?start={start}&stop={end}&format=json&count=50&startIndex={startindex}',\n                startIndexOrigin: 1,\n                name: 'Sentinel-1 A/B',\n                dateOff: ' beginposition:[{start} TO {end}]',\n                areaOff:  ' footprint:\"Intersects({polygon})\"'\n            }\n\n        ]\n\n        const getTargetCollection= (mission) => {\n            return collections.find( (collection) => {return collection.code == mission} )\n        }\n        // console.log(getTargetCollection(mission))\n        let target = getTargetCollection(code)\n        let newurl = target.templateUrl\n        //let start, end, \n        // let windowSize\n        \n\n        if(polygon.length > 0) {\n            // windowSize = 1000 * 60 * 60 * 24 * 30 // 1 month time window\n            // start = dateFormat(new Date(date - windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // end =  dateFormat(new Date(date + windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // console.log('|'+polygon.length+'|')\n            newurl = newurl.replace(\"{polygon}\", polygon)\n            newurl = newurl.replace(target.dateOff, '')\n            // newurl = newurl.replace(\"{start}\", start)\n            // newurl = newurl.replace(\"{end}\", end)\n\n        } else {\n            // windowSize = 1000 * 60 * 60 * 24  // 3 hours time window\n            // windowSize = 1000 * 60 * 60 * 24 * 30 // 1 month time window\n\n            // start = dateFormat(new Date(date - windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n            // end =  dateFormat(new Date(date + windowSize/2),'isoUtcDateTime').replace('Z','.000Z')\n\n            newurl = newurl.replace(target.areaOff, '')\n            newurl = newurl.replace(\"{start}\", start)\n            newurl = newurl.replace(\"{end}\", end)\n        }\n        \n        startindex = target.startIndexOrigin = 0 ? startindex : startindex + target.startIndexOrigin\n        // newurl = newurl.replace(\"{startindex}\",startindex)\n\n\n        return newurl\n    }\n\n    \n    const MAX_ITEMS = 13000\n\n    const [geojsonResults, setGeojsonResults] = useState(null)\n    const [loading, setLoading] = useState(false)\n    \n    const [ searchepoch,  ] = useGlobal('searchepoch');\n    const [ startend,  ] = useGlobal('startend');\n    const [ mission,  ] = useGlobal('mission');\n    const [ apppolygon,  ] = useGlobal('apppolygon');\n    const [gosearch, setGosearch] = useGlobal('gosearch')\n\n\n    const [se] = SearchManager();\n\n    const [ searchUrl, setSearchurl  ] = useState(null);\n    // const [ searchtimeout, setSearchtimeout ] = useState(null);\n\n//{totalresults,startindex}\n\n// fetch('https://...')\n//   .then(response => response.json())\n//   .then(data => console.log('data is', data))\n//   .catch(error => console.log('error is', error));\n    useEffect(() => {\n        const fetchURL = async (url,index) => {\n             setLoading(true)\n            let newurl = url\n            newurl = newurl.replace(\"{startindex}\",index)\n            console.log('Search: '+newurl)\n            let paging = {totalresults:0, startindex:0, itemsperpage:0}\n            try {\n                \n                const response = await fetch(newurl, {mode: 'cors', credentials: 'include'})\n                // console.log( response.text())\n                try {\n                    const json = await response.json()\n                    const geoJson = (mission === 'ENVISAT')? json : dhusToGeojson(json)\n                    // console.log('totalResults: ' + geoJson.properties.totalResults)\n                    paging = {\n                        totalresults: geoJson.properties.totalResults == null ? 0 : Number(geoJson.properties.totalResults) ,\n                        startindex:  Number(geoJson.properties.startIndex), \n                        itemsperpage:  Number(geoJson.properties.itemsPerPage)\n                    }\n                    console.log(paging)\n\n                    // setPagination(paging)\n                    if(paging.totalresults>0) setGeojsonResults(geoJson) \n\n                    if (paging.startindex + paging.itemsperpage < Math.min(paging.totalresults,MAX_ITEMS) ) {\n                        console.log(\"There's More...\")  \n                        fetchURL(url,(paging.startindex + paging.itemsperpage))\n                    } else {\n                        setLoading(false)  \n                    }\n\n                } catch (err) {\n                    console.log(\"Didn't recieve a json !\")\n                    console.log(err)\n                    setLoading(false);\n                }\n            } catch(err) {\n                console.log(\"Error contacting server...\")\n                console.log(err)\n                setLoading(false)   \n            }\n        }\n\n        if(searchUrl) {\n            // setLoading(true)\n            fetchURL(searchUrl,0)\n        }\n    }, [searchUrl]);\n    \n\n    useEffect(() => {\n        console.log('DataHub ready. '+mission)\n    }, []);\n\n\n\n    useEffect(() => {\n        console.log('mission: '+mission+ ' start/end: '+ startend.start+'/' + startend.end + ' apppolygon: '+apppolygon)\n\n        if(mission && searchepoch) {\n            // clearTimeout(searchtimeout)\n            // let timeout = setTimeout(() => {\n                try {\n                    let url = buildUrl({\n                        code: mission,\n                        polygon: apppolygon, \n                        start: startend.start,\n                        end: startend.end\n                    })\n\n                    // setLoading(true)\n                    setSearchurl(url)\n            \n                } catch(e) {\n                    console.log('Not a JULIAN date !')\n                    console.log(e)\n                }\n\n            // },500)\n            // setSearchtimeout(timeout)\n            \n        }\n        \n    }, [gosearch, mission, apppolygon, startend.start]);\n\n    return {geojsonResults, loading}\n}\n","import { useState, useEffect } from \"react\"\nimport { useGlobal } from 'reactn'\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\n\nexport default function SearchManager() {\n\n    const [ searchepoch,  ] = useGlobal('searchepoch');\n    const [ startend,  setStartend] = useGlobal('startend');\n    const [ apppolygon,  ] = useGlobal('apppolygon');\n    const [ mission,  ] = useGlobal('mission');\n    const [ replace, setReplace ] = useGlobal('replace')\n    const [gosearch, setGosearch] = useGlobal('gosearch')\n\n\n    // const { geojsonResults, loading} = useDatahub();\n\n\n    const [windowSize, setWindowSize] = useState(1000 * 60 * 60 * 24)\n    const [searchList, setSearchList] = useState([])\n    const [replacemode, setReplacemode] = useState(0)\n    \n\n    // const [replacemode, toggleReplacemode] = useToggle(false)\n\n    // const [ startend, setStartend ] = useState({start:0, end:0});\n\n    // const toggleReplace = () => {\n    //     console.log('toggle replace from: '+replacemode)\n    //     if(replacemode == true) {\n    //         setReplacemode(false)\n    //     } else {\n    //         setReplacemode(true)\n    //     }\n\n    // }\n    // // replace => { setReplace(!replace); return !replace }\n    // useHotkeys('ctrl+k', () => setCount(prevCount => prevCount + 1));\n    // useHotkeys(\"z\",() => setReplacemode(state => !state))\n    useHotkeys(\"z\",() => setReplacemode(count => count+1))\n\n    useEffect(() => {\n        console.log('apppolygon: '+apppolygon)\n        setReplacemode(count => count+1)\n        // if(apppolygon == '') {\n        //     setWindowSize(1000 * 60 * 60 * 24)\n        //     // setStartend({\n        //     //     start: null,\n        //     //     end: null\n        //     // })    \n            \n\n        // } else {\n        //     setWindowSize(1000 * 60 * 60 * 24 * 7)\n        // }\n        // // setGosearch(Math.random)\n    }, [apppolygon, mission]);\n\n    useEffect(() => {\n        console.log(\"cleaning searches: \" + replacemode)\n        // setReplace(replacemode)\n        if(replacemode) {\n            setReplace(count => count+1)\n            setSearchList([])\n            setGosearch(Math.random)\n        }\n    }, [replacemode]);\n\n\n    useEffect(() => {\n        // console.log('searchepoch: '+(new Date(searchepoch)).toJSON())\n        let SearchDate = new Date(searchepoch)\n        console.log('searchepoch: '+ SearchDate.toJSON())\n        let startepoch = (new Date(Date.UTC(SearchDate.getUTCFullYear(), SearchDate.getUTCMonth(), SearchDate.getUTCDate())))\n\n        // Catalogue search time window is discreet, set from 00:00:00 to 23:59:59 of the selected day \n        let _startdate = (new Date(startepoch.getTime())).toJSON()\n        let _enddate = (new Date(startepoch.getTime() + windowSize - 1000)).toJSON()\n\n        console.log('new start/end: '+_startdate + '/ ' + _enddate)\n\n        let newSearchList = searchList\n\n        if (newSearchList.indexOf(_startdate) < 0) {\n            newSearchList.push(_startdate)\n            if (newSearchList.length > 5) {\n                // newSearchList.shift()\n                console.log('should now remove geojson layer')\n            }\n            setSearchList(newSearchList)\n            setStartend({\n                start: _startdate,\n                end: _enddate\n            })    \n            setGosearch(Math.random)\n        } else {\n            console.log('Search already done !')\n            \n        }\n    }, [searchepoch]);\n\n\n\n\nreturn [ startend ]\n\n}\n","import React, { useGlobal, useState, useEffect } from \"reactn\"\nimport { useEww } from \"./useEww\"\n// import { useGlobal } from 'reactn'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport useDatahub from \"./useDatahub\"\n\n\nexport default function Eww({ id, clat, clon, alt, starfield, atmosphere, names }) {\n\nconst {\n    ewwstate,\n    addGeojson,\n    removeGeojson,\n    addWMS,\n    toggleProjection,\n    toggleAtmosphere,\n    toggleStarfield,\n    toggleNames,\n    setTime\n} = useEww({\n    id: id,\n    clat: clat,\n    clon: clon,\n    alt: alt,\n    starfield: starfield,\n    atmosphere: atmosphere,\n    names: names\n})\n\n  // toogle projection\n  useHotkeys(\"p\",toggleProjection)  \n  useHotkeys(\"a\",toggleAtmosphere)  \n  useHotkeys(\"s\",toggleStarfield)  \n  useHotkeys(\"n\",toggleNames)  \n  useHotkeys(\"c\",removeGeojson)\n  \n\n  const { geojsonResults, loading} = useDatahub();\n  const [ searchepoch,  ] = useGlobal('searchepoch');\n  const [ startend,  ] = useGlobal('startend');\n  const [ replace,  ] = useGlobal('replace');\n\n  const [ mission,  ] = useGlobal('mission');\n  const [ appdate,  ] = useGlobal('appdate')\n  const [ appstarfield,  setAppstarfield] = useGlobal('appstarfield')\n  const [ appatmosphere,  setAppatmosphere] = useGlobal('appatmosphere')\n  const [ appnames,  setAppnames] = useGlobal('appnames')\n  const [ , setSearching ] = useGlobal('searching')\n  const [ , setAppaltitude ] = useGlobal('appaltitude')\n  const [ , setApplatitude ] = useGlobal('applatitude')\n  const [ , setApplongitude ] = useGlobal('applongitude')\n  const [ apppolygon, setApppolygon ] = useGlobal('apppolygon')\n  const [ apppickeditems, setApppickeditems ] = useGlobal('apppickeditems')\n  // const [ replace, setReplace ] = useState(true)\n\n  // useHotkeys(\"z\",()=>setReplace(state=>!state))\n\n  useEffect(() => {\n    if(geojsonResults) {\n      console.log('datahub in use')\n        console.log(geojsonResults)\n        try {\n          addGeojson(geojsonResults,appdate)\n        } catch (err) {\n          console.log(\"error on geojson parsing\")\n          console.log(err)\n        }\n      }\n      \n  },[geojsonResults]);\n\n  useEffect(() => {\n    console.log('replace: ' + replace)\n    removeGeojson()\n  },[replace]);\n\n  useEffect(() => {\n    console.log('atmosphere')\n    toggleAtmosphere(appatmosphere)\n  },[appatmosphere])\n\n  useEffect(() => {\n    toggleStarfield(appstarfield)\n  },[appstarfield])\n  useEffect(() => {\n    toggleNames(appnames)\n  },[appnames])\n\n\n  useEffect(() => {\n    setSearching(loading)\n  },[loading]);\n\n  useEffect(() => {\n    setAppaltitude(ewwstate.altitude)\n    setApplongitude(ewwstate.longitude)\n    setApplatitude(ewwstate.latitude)\n  },[ewwstate.longitude,ewwstate.latitude, ewwstate.altitude ]);\n\n  // useEffect(() => {\n  //   // uncomment to search via polygon at low lats\n  //   // console.log(' could use polygon:')\n  //   // console.log(ewwstate.viewpolygon)\n  //   // setApppolygon(ewwstate.viewpolygon)\n\n  // },[ewwstate.viewpolygon ]);\n\n  useEffect(() => {\n    setApppolygon(ewwstate.aoi)\n    // setApppolygon('')\n  },[ewwstate.aoi]);\n\n  useEffect(() => {\n    // console.log(ewwstate.pickedItems.length + ' items picked')\n    // setApppolygon('')\n    setApppickeditems(ewwstate.pickedItems)\n  },[ewwstate.pickedItems]);\n\n\n\n  useEffect(() => {\n    setTime(appdate)\n  },[appdate]);\n\n  useEffect(() => {\n    setAppatmosphere(atmosphere)\n    setAppstarfield(starfield)\n    setAppnames(names)\n  },[]);\n\n\nlet globeStyle = {\n    background: 'inherit',\n    position: \"fixed\",\n    width: 'inherit',\n    height: 'inherit'\n  };\n\n\nreturn (\n    <canvas id={id} style={globeStyle} />\n)\n\n}\n","import React, { useEffect } from \"react\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './missionselector.css'\n\n\n// should use a prop\n\nfunction MissionSelector() {\n\n\n    const [ mission, setMission ] = useGlobal('mission');\n    useHotkeys(\"1\",()=>{setMission('S1')}) \n    useHotkeys(\"2\",()=>{setMission('S2')}) \n    useHotkeys(\"3\",()=>{setMission('S3')}) \n    useHotkeys(\"5\",()=>{setMission('S5P')}) \n    useHotkeys(\"6\",()=>{setMission('ENVISAT')}) \n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    \n    //console.log('mission rendering')\n    return (\n        <div className='MissionSelector'>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s1_black.png' alt='' onClick={() => setMission('S1')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s2_black.png' alt='' onClick={() => setMission('S2')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s3_black.png' alt='' onClick={() => setMission('S3')} /></div>\n            <div className='Circle'><img className='MissionIcon' draggable=\"false\" src='./images/s5p_black.png' alt='' onClick={() => setMission('S5P')} /></div>\n           \n            \n        </div>\n    )\n}\n\nexport default MissionSelector;\n","import React, { useEffect, useGlobal } from \"reactn\";\n// import { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './mapselector.css'\n\n\n// should use a prop\n\nfunction MapSelector() {\n\n\n    const [ appatmosphere, setAppatmosphere ] = useGlobal('appatmosphere');\n    const [ appstarfield, setAppstarfield ] = useGlobal('appstarfield');\n    const [ appnames, setAppnames ] = useGlobal('appnames');\n    // useHotkeys(\"1\",()=>{setMission('S1')}) \n    // useHotkeys(\"2\",()=>{setMission('S2')}) \n    // useHotkeys(\"3\",()=>{setMission('S3')}) \n    // useHotkeys(\"5\",()=>{setMission('S5P')}) \n    // useHotkeys(\"6\",()=>{setMission('ENVISAT')}) \n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    \n    //console.log('mission rendering')\n    return (\n        <div className='MapSelector'>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/atmosphere.png' alt='' onClick={() => setAppatmosphere(!appatmosphere)} /></div>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/starfield.png' alt='' onClick={() => setAppstarfield(!appstarfield)} /></div>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\"src='./images/names.png' alt='' onClick={() => setAppnames(!appnames)} /></div>\n           \n        </div>\n    )\n}\n\nexport default MapSelector\n","import React, { useState, useEffect, useLayoutEffect, useRef } from \"react\"\nimport {useSpring, animated, config} from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport './timeselector.css'\nimport { useGlobal } from 'reactn'\nimport { add, sub, scale } from 'vec-la'\nimport StepMask from './stepmask'\nimport useDebug from './useDebug'\n\n\n// to be split in a controller and a useTouchScale hook () => {<TouchScale>, scaleRenderer, size}\n\n\n\n\nfunction TimeSelector(props)  {\n\n    /// debug snippet\n    // const [debug, setDebug] = useDebug('')    \n    const [ , setDebug ] = useGlobal('debug')\n\n    //console.log(\"Render TimeSelector \")\n    const dayspace = 40\n    const zoomfactor = (props.max-props.min)/(dayspace*(props.max-props.min)/(1000*60*60*24))\n    const min = props.min\n    const max = min +((props.max - props.min) / zoomfactor)\n\n    \n\n    let wid, hei = 0\n    if(props.vertical) {\n        hei = max - min\n        wid = 100\n    } else {\n        wid = max - min\n        hei = 100\n\n    }\n\n\n    const [appdate, setAppdate] = useGlobal('appdate')\n    const [, setSearchepoch] = useGlobal('searchepoch')\n    const [, setHighlight] = useGlobal('highlight')\n    const [livePosition, setLiveposition] = useState(new Date())\n\n    const [tsactive, setTsactive] = useState(false); \n\n    const [step, setStep] = useState('continuous')\n\n    const myvertical = useRef()\n    myvertical.current = props.vertical\n\n\n    const timecontainer = useRef()\n\n    const [{ xy }, set] = useSpring(() => ({ xy: [0, 0] }))\n\n\n    const bind = useGesture({\n        onDrag: ({  down, delta, distance, velocity, active , direction, wheeling, time, first, last, temp = {\n                                                xy: xy.getValue(), \n                                                deltaOffset: [0, 0], \n                                                deltaCumul: [0, 0],\n                                                lastNewxy: [0, 0],\n                                                lastStep: 1, \n                                                lastIncrement: 0,\n                                                lastTime: time\n                                            }\n                }) => {\n            let springConfigUp = { mass: 1, tension: 200 , friction: 40, precision: 1 }\n            let springConfigDown = { mass: 1, tension: 1200 , friction: 40, precision: 0.01 }\n            let config = {  velocity: scale(direction, velocity), decay: true, precision: 1 }\n\n            velocity = (velocity<.15)?0:velocity\n\n            // if(time - temp.lastTime > 1000) {\n            //     console.log('deltaCumul...')\n            //     console.log(temp.deltaCumul)\n            //     if (temp.deltaCumul < 0.01) {\n            //         console.log('STABLE !!')\n            //     }\n            //     temp.lastTime = time\n            //     temp.deltaCumul = 0\n            // }\n            // temp.deltaCumul += velocity      \n\n            if (!down) setStep(1)\n            \n            if(first) { setTsactive(true)}\n            if(myvertical.current) {    \n                //let pos = target.getBoundingClientRect().top\n                let height = timecontainer.current.parentElement.offsetHeight\n\n                //let followDest = (delta[0]<-200)?delta[1]*10+temp.xy[1]:delta[1]+temp.xy[1]\n                let step = 1\n                let div = 1\n                // console.log(temp.xy[0])\n                if (delta[0]<-30) {step = (1000 * 60 * 60 * 24)  / zoomfactor; div = 10; }\n                if (delta[0]<-80) {step = (1000 * 60 * 60 * 24 * 30) / zoomfactor; div = 15}\n                if (delta[0]<-160) {step = (1000 * 60 * 60 * 24 * 365) / zoomfactor; div = 30}\n\n                if(step !== temp.lastStep) {\n                    //console.log('Step changed from: '+temp.lastStep+' to: '+ step)\n                    setDebug(['Step changed from: '+temp.lastStep+' to: '+ step, 0])\n                    setStep(step)\n                    temp.deltaOffset = delta\n                    temp.xy = temp.lastNewxy\n                }\n\n                delta = sub(delta,temp.deltaOffset)\n                let deltaFactor = [Math.round(delta[0]/div)*step,Math.round(delta[1]/div)*step]\n                if(down) velocity = 0\n                let newxy = add(scale(deltaFactor,Math.pow(velocity+1,2)), temp.xy)\n\n                if(step !== temp.lastStep) {\n                    temp.xy = newxy\n                    temp.lastStep = step\n                }\n\n                temp.lastNewxy = newxy\n                \n                const setLiveTime = ({ xy }) => { setLiveposition(min+(-xy[1]+height/2)*zoomfactor)}\n                const setFinalTime = ({ xy }) => {   if(!down && !active) {setTsactive(false)}; if(!down) { setSearchepoch(min+(-xy[1]+height/2)*zoomfactor) }}  \n\n\n                let minX = timecontainer.current.parentElement.offsetTop + timecontainer.current.parentElement.offsetHeight / 2\n                let maxX = - timecontainer.current.offsetHeight + timecontainer.current.parentElement.offsetHeight / 2\n        \n                newxy[1] = newxy[1]>minX ? minX : newxy[1]\n                newxy[1] = newxy[1]<maxX ? maxX : newxy[1]\n\n                set({  xy: newxy ,   config: down?springConfigDown:springConfigUp, immediate: down, onRest: setFinalTime, onFrame: setLiveTime} )\n\n            } else {    \n            }\n            return temp\n        },\n        onWheel: ({down, delta, distance, wheeling, event, temp= { xy: xy.getValue() }}) => {\n            event.persist()\n            // console.log(event.deltaY)\n            // console.log('direction: '+direction)\n            // console.log(delta)\n            // console.log(temp.xy)\n            setTsactive(true)\n            let height = timecontainer.current.parentElement.offsetHeight\n            const setLiveTime = ({ xy }) => { setLiveposition(min+(-xy[1]+height/2)*zoomfactor)}\n            const setFinalTime = ({ xy }) => {   setTsactive(false); if(!wheeling) { setSearchepoch(min+(-xy[1]+height/2)*zoomfactor) }}  \n            // let newxy = add([0,event.deltaY],temp.xy)\n            let newxy = add([0,event.deltaY*0.2],temp.xy)\n\n            let minX = timecontainer.current.parentElement.offsetTop + timecontainer.current.parentElement.offsetHeight / 2\n            let maxX = - timecontainer.current.offsetHeight + timecontainer.current.parentElement.offsetHeight / 2\n    \n            newxy[1] = newxy[1]>minX ? minX : newxy[1]\n            newxy[1] = newxy[1]<maxX ? maxX : newxy[1]\n\n            // let newxy = scale(delta, 0.1)\n            //setDebug(newxy)\n            // temp.xy = newxy\n\n            set({  xy: newxy , config: { tension: 1200, friction: 40, precision: 1  }, immediate: true, onRest: setFinalTime, onFrame: setLiveTime} )\n            return temp\n        }\n\n    })\n\n    \n\n    const scaleText = () => {\n        \n        let monthcode = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n        let day, month, hour, year = 0\n        let lastday, lastmonth = 0\n        let tics = []\n        const dayclass = (!props.vertical)?'DayTic':'DayTic-v'\n        const monthclass = (!props.vertical)?'MonthTic':'MonthTic-v'\n        const yearclass = (!props.vertical)?'YearTic':'YearTic-v'\n        \n        \n        for (let i=props.min;i<=props.max;i+=3600000) {\n            day = (new Date(i)).getUTCDate()\n            month = monthcode[(new Date(i)).getUTCMonth()]\n            hour = (new Date(i)).getUTCHours()\n            year = (new Date(i)).getUTCFullYear()\n            if(day !== lastday) tics.push({class:dayclass, pos: (i-props.min)/zoomfactor, label: day})\n            if(month !== lastmonth ) {\n                tics.push({class:monthclass, pos: (i-props.min)/zoomfactor, label: month})\n                tics.push({class:yearclass, pos: (i-props.min)/zoomfactor, label: year})\n            }\n            //if(year != lastyear) tics.push({class:'YearTic', pos: (i-props.min)/zoomfactor, label: year})\n            //if(hour != lasthour) tics.push({class:'HourTic', pos: (i-props.min)/zoomfactor, label: '.'})\n            lastday = day\n            lastmonth = month\n        }\n\n            return tics.map(item => (            <div className={item.class} key={item.class+item.pos} style={(!props.vertical)?{left:item.pos}:{top:item.pos}}>{item.label}</div>))\n    }\n\n    const [timescale, setTimescale] = useState('')    \n    //const [vertical, setVertical] = useState(props.vertical)    \n    useLayoutEffect(() => {\n        //console.log(\"useEffect (livePosition) in TimeSelector: \"+livePosition)\n        setTimescale(scaleText(props.vertical))\n    \n    },[props.vertical])\n\n\n    \n\n\n    useLayoutEffect(() => {\n        // if no gesture (touch, mouse) is ongoing, the time selector follows the global appdate\n        let offset =0\n        if(!tsactive) {\n            \n            if(props.vertical) {\n                offset = ((min - appdate)/zoomfactor)+timecontainer.current.parentElement.offsetHeight/2\n                set({ xy: [0,offset], config: { tension: 1200, friction: 40 }, onFrame: null, onRest: null }  )\n            } else {\n                offset = ((min - appdate)/zoomfactor)+timecontainer.current.parentElement.offsetWidth/2\n                set({ xy: [offset,0], config: { tension: 1200, friction: 40 }, onFrame: null, onRest: null }  )\n\n            }           \n        }\n    },[appdate,timescale])  \n\n    useEffect(() => {\n        setAppdate(livePosition)\n    },[livePosition])\n\n\n\n    useEffect(() => {\n        // console.log('Step changed to: ' + step)\n        switch(step) {\n            case 40:\n                setHighlight(\"day\")\n                break;\n            case 1200:\n                setHighlight(\"month\")\n                break;\n            case 14600:\n                setHighlight(\"year\")\n                break;\n            default:\n                setHighlight(\"none\")\n        }\n    },[step])\n\n\n    useLayoutEffect(() => {\n        console.log(\"zoom changed to: \"+props.zoom)\n    },[props.zoom])\n\n    return (\n        <div className={props.vertical?\"Mask-v\":\"Mask\"} >\n            \n            <div className=\"TriangleContainer\" >\n                <svg height=\"40\" width=\"20\" className=\"Triangle\">\n                    <polygon points=\"20,5 20,35 12,20\" />   \n                </svg> \n            </div>        \n            <div className=\"TimeContainer\" ref={timecontainer}>\n                \n                <animated.div className=\"TimeScale\" {...bind()} style={{ width: wid,height: hei, transform: xy.interpolate((x, y) => `translate3d(0px,${y}px,0)`) }}>\n                    {timescale}\n                </animated.div>\n            </div>\n        </div>\n    )\n}\n\nexport default TimeSelector","import React, { useState, useLayoutEffect } from \"react\";\nimport { useGlobal } from 'reactn';\nimport dateFormat from \"dateformat\"\nimport \"./timelabel.css\"\n\n\n\n\nfunction TimeLabel() {\n\n    const [ appdate,  ] = useGlobal('appdate')\n    const [ highlight, ] = useGlobal('highlight')\n    const [ searching, ] = useGlobal('searching')\n\n    const [year, setYear] = useState('') \n    const [month, setMonth] = useState('') \n    const [day, setDay] = useState('') \n    const [time, setTime] = useState('') \n\n    useLayoutEffect(() => {     \n        let date = new Date(appdate)\n        setYear(date.getUTCFullYear())\n        setMonth(dateFormat(date,'UTC:mmm'))\n        setDay(dateFormat(date,'UTC:dd'))\n        setTime(dateFormat(date,'UTC:HH:MM:ss'))\n    },[appdate])\n\n    // useLayoutEffect(() => {     \n    //     console.log('Searching: '+searching)\n    // },[searching])\n\n\n    return (\n        <div className='LabelContainer' >\n            <div className='Date'>\n                <div className={highlight==='day' || highlight==='none'?'DayLabel':'DayLabel Greyedout'}  key='day'  >{day}</div>\n                <div className='YearMonth'>\n                    <div className={highlight==='month' || highlight==='none'?'MonthLabel ':'MonthLabel  Greyedout'}  key='month' >{month}</div>\n                    <div className={highlight==='year' || highlight==='none'?'YearLabel ':'YearLabel Greyedout'}  key='year' >{year}</div>\n                </div>\n            </div>\n            <div className={searching===true?'Line  Line-active':'Line'} key='line' ></div>\n            <div className={highlight==='time' || highlight==='none'?'TimeLabel ':'TimeLabel Greyedout'} key='time' >{time}</div>\n        </div>\n    );\n    // <div className='MonthLabel' key='month' style={highlight=='month'?{color: 'rgba(120,0,0,1)'}:{}} >{month}</div>\n\n\n    \n}\n\nexport default TimeLabel;\n","import React, { useEffect, useState, useLayoutEffect, useGlobal } from \"reactn\";\n// import { useGlobal } from 'reactn';\nimport \"./mapstatelabel.css\"\nimport { useHotkeys } from 'react-hotkeys-hook';\n\n\n\nfunction MapStateLabel() {\n\n    const [ appaltitude,  ] = useGlobal('appaltitude')\n    const [ apppickeditems, setApppickeditems ] = useGlobal('apppickeditems')\n    // let item = 'toto'\n    const [items, setItems] = useState([])\n    const [showQL, setShowQL] = useState(false)\n\n    useHotkeys(\"q\",()=>{setShowQL(showQL => !showQL)}) \n\n    useEffect(() => {\n        // console.log(apppickeditems)\n        // if (apppickeditems.length != 0) {\n        //     if (apppickeditems.length > 1) {\n        //         setItem(apppickeditems.length + ' items selected')\n        //     } else {\n        //         setItem(apppickeditems[0].userProperties.name)\n        //     }\n        //     // console.log(apppickeditems.length + ' items picked')\n        // } else {\n        //     setItem([])\n        // }\n        setItems(apppickeditems)\n      },[apppickeditems])\n    \n    // const [altitude, setAltitude] = useState()\n\n\n    // useLayoutEffect(() => {    \n    //     console.log('Altitude changed') \n    //     setAltitude(Math.ceil(appaltitude / 1000))\n    // },[appaltitude])\n\n    return (\n        <div className='MapStateLabel' >\n            <div style={{fontSize: 10}}>\n                {items.map( item => <div className='metadata' key={item.userProperties.name}>{item.userProperties.name}<img className='Quicklook' style={{display: showQL?'inline':'none'}} src={item.userProperties.quicklookUrl} alt=''/></div>)} \n            </div>\n            <div >{Math.ceil(appaltitude / 1000)+ ' Km'}</div>\n        </div>\n    )\n    // <div className='MonthLabel' key='month' style={highlight=='month'?{color: 'rgba(120,0,0,1)'}:{}} >{month}</div>\n\n\n    \n}\n\nexport default MapStateLabel;\n","import React, { useEffect, useState } from \"react\";\nimport { useGlobal } from 'reactn';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './debug.css'\n\n\n\n\nfunction Debug() {\n\n    const [ debug, setDebug ] = useGlobal('debug')\n    const [ active, setActive ] = useState(false)\n    const [ debugkeys, setDebugkeys ] = useState([])\n    \n\n    useHotkeys(\"d\",()=>{setActive(active => !active)}) \n\n    useEffect(() => {\n        console.log('Debug Overlay Key: d')\n    }, []);\n\n    useEffect(() => {\n        if(active) {\n            console.log('debug txt: ')\n            console.log(debug)\n            let lines = debugkeys\n            lines[debug[1]] = debug[0]\n            setDebugkeys( lines )\n            console.log(lines)\n        }\n    }, [debug]);\n\n\n    useEffect(() => {\n        setDebug( ['Hi',0])\n    }, []);\n\n//     const listItems = numbers.map((number) =>\n//     <li>{number}</li>\n//   );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n\n    return (\n        <div className='Debug' style={{display: (active)?'inline':'none', width: '100%', height:'100%'}}>\n            {/* <div className='ContinuousScroll' style={{position: 'relative', top: '70%', right:0, width: 60, height:'100%', background:  'rgba(22, 22, 20, 0.24)'}}/> */}\n            <div className='DebugBox1'>\n                <ul>\n                    {debugkeys.map(item=><li key={item?item[1]:''}>{item?item:'free'}</li>)}\n                </ul>\n            </div> \n        </div>\n    )\n}\n\nexport default Debug\n","import React, {useState, useLayoutEffect, useEffect, useRef } from \"react\";\nimport {useSpring, animated} from 'react-spring';\nimport { useGesture } from 'react-use-gesture'\nimport { useGlobal } from 'reactn'\nimport { add, sub, scale } from 'vec-la'\nimport \"./controlpanel.css\"\n\nexport default function SlidePanel(props) {\n\n    const [ , setDebug ] = useGlobal('debug')\n\n    const [visible, setVisible] = useState(true)\n    const [{ xy }, set] = useSpring(() => ({ xy: [0, 0] }))\n\n    const slidePanel = useRef()\n\n    const toggle = () =>  {\n        setDebug(['toggle from: '+visible+' '+slidePanel.current.offsetWidth,2])\n        set({ xy: !visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n        setVisible(visible => !visible)\n    }\n\n    useEffect(() => {\n        setDebug(['visible: '+visible,1])\n        // set({ xy: visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n    },[visible])\n\n    useEffect(() => {\n        setTimeout(toggle,1000)\n        // set({ xy: visible?[0,0]:[slidePanel.current.offsetWidth,0], immediate: false})\n    },[])\n\n    const bind = useGesture({\n        onDrag: ({  first , event, direction, velocity, down,  delta, vxvy, temp={initTarget: '', xy: xy.getValue()}}) => {\n            // setDebug('tempX: '+add(temp.xy,delta)[0],1)\n            // setDebug('down: '+down,2)\n            if(first) temp.initTarget = event.target.getAttribute(\"class\")\n            if(temp.initTarget != 'ControlPanel') return\n            if(down) {\n                set({ xy: add(temp.xy,delta), immediate: true })\n                // set({ xy: newxy })\n            } else {\n                if(vxvy[0] > 0.2) {\n                    let config = {  velocity: scale(direction, velocity), decay: true, precision: 1 }\n                    setDebug(['visible: '+visible,1])\n                    set({ xy: [slidePanel.current.offsetWidth,0], immediate: false})\n                    setVisible(false)\n                } else {\n                    set({ xy: temp.xy, immediate: false })\n                }\n            }\n            return temp\n\n\n            // if(!down && vxvy[0] > 0.2) {\n            //     setVisible(state => !state)\n            // } else {\n\n            //     let newxy = add(temp.xy,delta)\n            //     setDebug('offsetWidth: '+slidePanel.current.offsetWidth)\n            //     // if(!down && vxvy[0] > 0.2) {\n            //     //     newxy = [slidePanel.current.offsetWidth,0]\n            //     // }\n                \n            //     set({ xy: newxy, immediate: down })\n            //     return temp\n\n            // }\n        }\n        },\n        { event: { passive: false } })\n\n\n    return (\n        <div>\n            <img className='Logo' draggable=\"false\" src={props.imageSrc} alt=''  onClick={toggle} />\n\n            <animated.div {...bind()} ref={slidePanel} className='ControlPanel' style={{ transform: xy.interpolate((x, y) => `translate3d(${x}px,0,0)`) }}>\n                    {props.children}\n            </animated.div>\n        </div>\n\n    )\n}","import React, { useEffect } from \"react\";\nimport { useGlobal } from 'reactn';\n\nimport { HuePicker, AlphaPicker } from 'react-color';\nimport './colorpicker.css'\n\n\n// should use a prop\n\nfunction ColorPicker() {\n\n\n    const [ appcolor, setAppcolor ] = useGlobal('appcolor');\n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    const handleChangeComplete = (color) => {\n        document.documentElement.style.setProperty('--color', color.hex);\n        //setAppcolor(color.hex );\n      };\n    \n    //console.log('mission rendering')\n    return (\n        <div className='ColorSelector'>\n            <HuePicker color={appcolor} onChangeComplete={handleChangeComplete }/>\n            \n            \n        </div>\n    )\n    // <AlphaPicker />  \n}\n\nexport default ColorPicker;\n","import React, { useState, useEffect } from \"react\";\nimport ClockController from \"./clockController\";\nimport Eww from \"./eww\";\nimport MissionSelector from \"./missionselector\";\nimport MapSelector from \"./mapselector\";\nimport Fullscreen from \"react-full-screen\";\nimport { useFullscreen } from '@straw-hat/react-fullscreen';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useGlobal } from 'reactn';\n\nimport \"./styles.css\"\nimport TimeSelector from \"./timeselector2\";\nimport TimeLabel from \"./timelabel\";\nimport MapStateLabel from \"./mapstatelabel\";\n\nimport Debug from \"./debug\";\nimport SlidePanel from \"./slidepanel\";\nimport StepMask from './stepmask'\nimport ColorPicker from './colorpicker'\n\n\n\nconst App = () => {\n  //const [count, setCount] = useState(1000);\n  const [hasFetched, setFetch] = useState(false)\n\n\n  \n  const [ mission, setMission ] = useGlobal('mission');\n    useEffect(() => {\n        console.log('Mission changed to: '+ mission)\n    }, [mission]);\n \n\n\n  // Set boundaries and zoom factor of the time scale\n  const [min, setMin] = useState((new Date(\"2014-10-01\")).getTime())\n  const [max, setMax] = useState((new Date(\"2019-12-31\")).getTime())\n  \n  const [vertical, setVertical] = useState(true)\n  \n  useHotkeys(\"h\",() => {\n    setVertical(prevVertical => {\n        return (!prevVertical)\n      })\n    })\n\n\n  useEffect(() => {\n\n    const mockApi = () => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const randomInt = Math.ceil(Math.random() * 10)\n          console.log(\"mockApi done\")\n          resolve(randomInt)\n        }, 2000)\n      })\n    }\n    \n    async function doFetch() {\n      if (!hasFetched) {\n        const apiResponse = await mockApi();\n        setFetch(true);\n      }\n    }\n\n    doFetch()\n  }, []);\n  \n\n\n\n  const [isFull,setIsfull] = useState(false)\n  const { isFullscreen, toggleFullscreen } = useFullscreen(window.document.body);\n  // const [isControlPanel, setIscontrolpanel] = useState(false)\n  \n  useHotkeys(\"f\",toggleFullscreen )  \n  \n  //const [ appdate, setAppdate ] = useGlobal('appdate');\n  // const [ myname,  ] = useGlobal('appnames');\nconsole.log('app renders')\n  return (\n    <div className=\"App\">\n      <Fullscreen enabled={isFull} onChange={() =>  {if(!isFull) setIsfull(false)} }>\n      \n        <div className=\"DateTimeLabel\" >\n          <TimeLabel vertical={vertical} />\n        </div>\n        \n        <div className=\"ClockController\">\n          <ClockController duration=\"600000\"/>\n        </div> \n\n        <div className=\"Globe\">\n          <Eww id=\"globe\" starfield=\"true\" atmosphere='true' clon='0.5' clat='40' names='true'/>\n        </div>\n        <div className={vertical?\"TimeSelectorv\":\"TimeSelectorh\"}>\n          <TimeSelector min={min} max={max} vertical={vertical}/>\n        </div>\n        \n        <div className='MissionLabel'>{mission}</div>\n        <MapStateLabel></MapStateLabel>\n        <SlidePanel active='false' imageSrc='./images/ESA_logo_white.png' >\n          <MissionSelector></MissionSelector>\n          <MapSelector></MapSelector>\n          <ColorPicker />\n        </SlidePanel>\n\n        <Debug action='Bonjour'/>\n\n      </Fullscreen>\n   </div>\n  );\n}\n\n\n        // <ControlPanel active='false' imageSrc='./images/EOi_logo.png' >\n        //         <MissionSelector></MissionSelector>\n        //         <MapSelector></MapSelector>\n        // </ControlPanel>\n\n// <ColorPicker />\n//         <StepMask/>\n\n        // <div className='MiniGlobe' >\n        //   <Eww id='miniglobe' clon='0.5' clat='40' myname={myname}/>  \n        // </div>  \n\n                // <img className='Logo' src='./images/EOi_logo.png' alt='' onClick={()=>setIscontrolpanel((isControlPanel => !isControlPanel))} />\n\n\n\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import { setGlobal } from 'reactn';\n\n\nexport  function initGlobalStates() {\n    console.log(\"init global: \"+(new Date()).getTime())\n\n    // Set current time as global state\n    // setGlobal({appdate: ((new Date()).getTime())})\n    // setGlobal({searchepoch: ((new Date()).getTime())})\n    // setGlobal({mission: 'S1'})\n    // setGlobal({searching: false})\n    // setGlobal({apppolygon: ''})\n    // setGlobal({replace: true})\n    // setGlobal({startend: {start:0, end:0}})\n    // setGlobal({setApppickeditems: []})\n\n\n    setGlobal({\n        appdate: (new Date()).getTime(),\n        searchepoch: (new Date()).getTime(),\n        mission: 'S1',\n        searching: false,\n        apppolygon: '',\n        replace: true,\n        startend: {start:0, end:0},\n        apppickeditems: []\n    })\n    \n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./app\";\nimport {initGlobalStates} from \"./initglobalstates\"\nimport registerServiceWorker from './registerServiceWorker';\n\n// if you're in create-react-app import the files as:\n// import store from \"./js/store/index\";\n// import App from \"./js/components/App.jsx\";\ninitGlobalStates()\n\nrender(\n  <App />,\n  // The target element might be either root or app,\n  // depending on your development environment\n  // document.getElementById(\"app\")\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();"],"sourceRoot":""}